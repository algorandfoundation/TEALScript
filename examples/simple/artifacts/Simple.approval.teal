#pragma version 10
intcblock 32 1 256
bytecblock 0x636f756e746572 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 0x151f7c75

// This TEAL was generated by TEALScript v0.107.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// incrementCounter(i: uint64): void
incrementCounter:
	proto 1 0

	// examples/simple/simple.algo.ts:7
	// this.counter.value = this.counter.value + i
	bytec 0 //  "counter"
	dup
	app_global_get
	frame_dig -1 // i: uint64
	+
	app_global_put
	retsub

// incr(uint64)void
*abi_route_incr:
	// i: uint64
	txna ApplicationArgs 1
	btoi

	// execute incr(uint64)void
	callsub incr
	intc 1 // 1
	return

// incr(i: uint64): void
incr:
	proto 1 0

	// examples/simple/simple.algo.ts:11
	// this.incrementCounter(i)
	frame_dig -1 // i: uint64
	callsub incrementCounter
	retsub

// decr(uint64)void
*abi_route_decr:
	// i: uint64
	txna ApplicationArgs 1
	btoi

	// execute decr(uint64)void
	callsub decr
	intc 1 // 1
	return

// decr(i: uint64): void
decr:
	proto 1 0

	// examples/simple/simple.algo.ts:15
	// this.counter.value = this.counter.value - i
	bytec 0 //  "counter"
	dup
	app_global_get
	frame_dig -1 // i: uint64
	-
	app_global_put
	retsub

// add(uint256,uint256)uint256
*abi_route_add:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// b: uint256
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 32
	==

	// argument 0 (b) for add must be a uint256
	assert

	// a: uint256
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 32
	==

	// argument 1 (a) for add must be a uint256
	assert

	// execute add(uint256,uint256)uint256
	callsub add
	dup
	bitlen
	intc 2 // 256
	<=

	// add return value overflowed 256 bits
	assert
	bytec 1 // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 0 // 32
	-
	swap
	substring3
	concat
	log
	intc 1 // 1
	return

// add(a: uint256, b: uint256): uint256
add:
	proto 2 1

	// examples/simple/simple.algo.ts:19
	// return a + b;
	frame_dig -1 // a: uint256
	frame_dig -2 // b: uint256
	b+
	retsub

// sub(uint256,uint256)uint256
*abi_route_sub:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// b: uint256
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 32
	==

	// argument 0 (b) for sub must be a uint256
	assert

	// a: uint256
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 32
	==

	// argument 1 (a) for sub must be a uint256
	assert

	// execute sub(uint256,uint256)uint256
	callsub sub
	dup
	bitlen
	intc 2 // 256
	<=

	// sub return value overflowed 256 bits
	assert
	bytec 1 // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 0 // 32
	-
	swap
	substring3
	concat
	log
	intc 1 // 1
	return

// sub(a: uint256, b: uint256): uint256
sub:
	proto 2 1

	// examples/simple/simple.algo.ts:23
	// return a - b;
	frame_dig -1 // a: uint256
	frame_dig -2 // b: uint256
	b-
	retsub

*abi_route_createApplication:
	intc 1 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x9fab8610 // method "incr(uint64)void"
	pushbytes 0x2e0c5a47 // method "decr(uint64)void"
	pushbytes 0xac976e02 // method "add(uint256,uint256)uint256"
	pushbytes 0x091b32a7 // method "sub(uint256,uint256)uint256"
	txna ApplicationArgs 0
	match *abi_route_incr *abi_route_decr *abi_route_add *abi_route_sub

	// this contract does not implement the given ABI method for call NoOp
	err