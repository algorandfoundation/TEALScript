#pragma version 10
intcblock 1 8 2 0
bytecblock 0x 0x0024

// This TEAL was generated by TEALScript v0.107.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// verifyMBRPayment(payment: PayTxn, preMBR: uint64): void
verifyMBRPayment:
	proto 2 0

	// examples/arc75/arc75.algo.ts:10
	// verifyPayTxn(payment, {
	//       receiver: this.app.address,
	//       amount: this.app.address.minBalance - preMBR,
	//     })
	// verify receiver
	frame_dig -1 // payment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"payment","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // payment: PayTxn
	gtxns Amount
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	frame_dig -2 // preMBR: uint64
	-
	==

	// transaction verification failed: {"txn":"payment","field":"amount","expected":"this.app.address.minBalance - preMBR"}
	assert
	retsub

// sendMBRPayment(preMBR: uint64): void
sendMBRPayment:
	proto 1 0

	// examples/arc75/arc75.algo.ts:17
	// sendPayment({
	//       receiver: this.txn.sender,
	//       amount: preMBR - this.app.address.minBalance,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// examples/arc75/arc75.algo.ts:18
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// examples/arc75/arc75.algo.ts:19
	// amount: preMBR - this.app.address.minBalance
	frame_dig -1 // preMBR: uint64
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	-
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 3 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// addAppToWhiteList(string,uint16,uint64,pay)void
*abi_route_addAppToWhiteList:
	// payment: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (payment) for addAppToWhiteList must be a pay transaction
	assert

	// appID: uint64
	txna ApplicationArgs 3
	btoi

	// boxIndex: uint16
	txna ApplicationArgs 2
	dup
	len
	intc 2 // 2
	==

	// argument 2 (boxIndex) for addAppToWhiteList must be a uint16
	assert
	btoi

	// arc: string
	txna ApplicationArgs 1
	extract 2 0

	// execute addAppToWhiteList(string,uint16,uint64,pay)void
	callsub addAppToWhiteList
	intc 0 // 1
	return

// addAppToWhiteList(arc: string, boxIndex: uint16, appID: uint64, payment: PayTxn): void
//
// Add app to whitelist box
//
// @param arc - The ARC the whitelist corresponds to
// @param boxIndex - The index of the whitelist box to add the app to
// @param appID - The app ID to add to the whitelist
// @param payment - The payment transaction to cover the MBR change
addAppToWhiteList:
	proto 4 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// examples/arc75/arc75.algo.ts:33
	// preMBR = this.app.address.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	frame_bury 0 // preMBR: uint64

	// examples/arc75/arc75.algo.ts:34
	// whitelist: Whitelist = { account: this.txn.sender, boxIndex: boxIndex, arc: arc }
	bytec 0 //  initial head
	bytec 0 //  initial tail
	bytec 1 //  initial head offset
	txn Sender
	callsub *process_static_tuple_element
	frame_dig -2 // boxIndex: uint16
	itob
	extract 6 2
	callsub *process_static_tuple_element
	frame_dig -1 // arc: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury 1 // whitelist: Whitelist

	// *if0_condition
	// examples/arc75/arc75.algo.ts:36
	// this.whitelist(whitelist).exists
	frame_dig 1 // whitelist: Whitelist
	box_len
	swap
	pop
	bz *if0_else

	// *if0_consequent
	// examples/arc75/arc75.algo.ts:37
	// this.whitelist(whitelist).value.push(appID)
	frame_dig 1 // whitelist: Whitelist
	box_get

	// box value does not exist: this.whitelist(whitelist).value
	assert
	extract 2 0
	frame_dig -3 // appID: uint64
	itob
	concat
	frame_dig 1 // whitelist: Whitelist
	dup
	box_del
	pop
	swap
	dup
	len
	intc 1 // 8
	/
	itob
	extract 6 2
	swap
	concat
	box_put
	b *if0_end

*if0_else:
	// examples/arc75/arc75.algo.ts:39
	// newWhitelist: uint64[] = [appID]
	frame_dig -3 // appID: uint64
	itob
	frame_bury 2 // newWhitelist: uint64[]

	// examples/arc75/arc75.algo.ts:40
	// this.whitelist(whitelist).value = newWhitelist
	frame_dig 1 // whitelist: Whitelist
	dup
	box_del
	pop
	frame_dig 2 // newWhitelist: uint64[]
	dup
	len
	intc 1 // 8
	/
	itob
	extract 6 2
	swap
	concat
	box_put

*if0_end:
	// examples/arc75/arc75.algo.ts:43
	// this.verifyMBRPayment(payment, preMBR)
	frame_dig 0 // preMBR: uint64
	frame_dig -4 // payment: PayTxn
	callsub verifyMBRPayment
	retsub

// setAppWhitelist(string,uint16,uint64[])void
*abi_route_setAppWhitelist:
	// appIDs: uint64[]
	txna ApplicationArgs 3
	extract 2 0

	// boxIndex: uint16
	txna ApplicationArgs 2
	dup
	len
	intc 2 // 2
	==

	// argument 1 (boxIndex) for setAppWhitelist must be a uint16
	assert
	btoi

	// arc: string
	txna ApplicationArgs 1
	extract 2 0

	// execute setAppWhitelist(string,uint16,uint64[])void
	callsub setAppWhitelist
	intc 0 // 1
	return

// setAppWhitelist(arc: string, boxIndex: uint16, appIDs: uint64[]): void
//
// Sets a app whitelist for the sender. Should only be used when adding/removing
// more than one app
//
// @param boxIndex - The index of the whitelist box to put the app IDs in
// @param appIDs - Array of app IDs that signify the whitelisted apps
setAppWhitelist:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// examples/arc75/arc75.algo.ts:55
	// preMBR = this.app.address.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	frame_bury 0 // preMBR: uint64

	// examples/arc75/arc75.algo.ts:56
	// whitelist: Whitelist = { account: this.txn.sender, boxIndex: boxIndex, arc: arc }
	bytec 0 //  initial head
	bytec 0 //  initial tail
	bytec 1 //  initial head offset
	txn Sender
	callsub *process_static_tuple_element
	frame_dig -2 // boxIndex: uint16
	itob
	extract 6 2
	callsub *process_static_tuple_element
	frame_dig -1 // arc: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury 1 // whitelist: Whitelist

	// examples/arc75/arc75.algo.ts:58
	// this.whitelist(whitelist).delete()
	frame_dig 1 // whitelist: Whitelist
	box_del

	// examples/arc75/arc75.algo.ts:60
	// this.whitelist(whitelist).value = appIDs
	frame_dig 1 // whitelist: Whitelist
	dup
	box_del
	pop
	frame_dig -3 // appIDs: uint64[]
	dup
	len
	intc 1 // 8
	/
	itob
	extract 6 2
	swap
	concat
	box_put

	// *if1_condition
	// examples/arc75/arc75.algo.ts:62
	// preMBR > this.app.address.minBalance
	frame_dig 0 // preMBR: uint64
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	>
	bz *if1_else

	// *if1_consequent
	// examples/arc75/arc75.algo.ts:63
	// this.sendMBRPayment(preMBR)
	frame_dig 0 // preMBR: uint64
	callsub sendMBRPayment
	b *if1_end

*if1_else:
	// examples/arc75/arc75.algo.ts:65
	// this.verifyMBRPayment(this.txnGroup[this.txn.groupIndex - 1] as PayTxn, preMBR)
	frame_dig 0 // preMBR: uint64
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// failed to cast this.txnGroup[this.txn.groupIndex - 1] to pay
	assert
	callsub verifyMBRPayment

*if1_end:
	retsub

// deleteWhitelist(string,uint16)void
*abi_route_deleteWhitelist:
	// boxIndex: uint16
	txna ApplicationArgs 2
	dup
	len
	intc 2 // 2
	==

	// argument 0 (boxIndex) for deleteWhitelist must be a uint16
	assert
	btoi

	// arc: string
	txna ApplicationArgs 1
	extract 2 0

	// execute deleteWhitelist(string,uint16)void
	callsub deleteWhitelist
	intc 0 // 1
	return

// deleteWhitelist(arc: string, boxIndex: uint16): void
//
// Deletes a app whitelist for the sender
//
// @param arc - The ARC the whitelist corresponds to
// @param boxIndex - The index of the whitelist box to delete
deleteWhitelist:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// examples/arc75/arc75.algo.ts:77
	// preMBR = this.app.address.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	frame_bury 0 // preMBR: uint64

	// examples/arc75/arc75.algo.ts:78
	// whitelist: Whitelist = { account: this.txn.sender, boxIndex: boxIndex, arc: arc }
	bytec 0 //  initial head
	bytec 0 //  initial tail
	bytec 1 //  initial head offset
	txn Sender
	callsub *process_static_tuple_element
	frame_dig -2 // boxIndex: uint16
	itob
	extract 6 2
	callsub *process_static_tuple_element
	frame_dig -1 // arc: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury 1 // whitelist: Whitelist

	// examples/arc75/arc75.algo.ts:80
	// this.whitelist(whitelist).delete()
	frame_dig 1 // whitelist: Whitelist
	box_del

	// examples/arc75/arc75.algo.ts:82
	// this.sendMBRPayment(preMBR)
	frame_dig 0 // preMBR: uint64
	callsub sendMBRPayment
	retsub

// deleteAppFromWhitelist(string,uint16,uint64,uint64)void
*abi_route_deleteAppFromWhitelist:
	// index: uint64
	txna ApplicationArgs 4
	btoi

	// appID: uint64
	txna ApplicationArgs 3
	btoi

	// boxIndex: uint16
	txna ApplicationArgs 2
	dup
	len
	intc 2 // 2
	==

	// argument 2 (boxIndex) for deleteAppFromWhitelist must be a uint16
	assert
	btoi

	// arc: string
	txna ApplicationArgs 1
	extract 2 0

	// execute deleteAppFromWhitelist(string,uint16,uint64,uint64)void
	callsub deleteAppFromWhitelist
	intc 0 // 1
	return

// deleteAppFromWhitelist(arc: string, boxIndex: uint16, appID: uint64, index: uint64): void
//
// Deletes a app from a whitelist for the sender
//
// @param boxIndex - The index of the whitelist box to delete from
// @param appID - The app ID to delete from the whitelist
// @param index - The index of the app in the whitelist
deleteAppFromWhitelist:
	proto 4 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// examples/arc75/arc75.algo.ts:94
	// preMBR = this.app.address.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	frame_bury 0 // preMBR: uint64

	// examples/arc75/arc75.algo.ts:95
	// whitelist: Whitelist = { account: this.txn.sender, boxIndex: boxIndex, arc: arc }
	bytec 0 //  initial head
	bytec 0 //  initial tail
	bytec 1 //  initial head offset
	txn Sender
	callsub *process_static_tuple_element
	frame_dig -2 // boxIndex: uint16
	itob
	extract 6 2
	callsub *process_static_tuple_element
	frame_dig -1 // arc: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury 1 // whitelist: Whitelist

	// examples/arc75/arc75.algo.ts:97
	// spliced = this.whitelist(whitelist).value.splice(index, 1)
	frame_dig 1 // whitelist: Whitelist
	box_get

	// box value does not exist: this.whitelist(whitelist).value
	assert
	extract 2 0
	intc 0 // 1
	frame_dig -4 // index: uint64
	intc 1 // 8
	*
	store 247 // splice start
	pushint 16
	store 246 // splice byte length
	frame_dig 1 // whitelist: Whitelist
	box_get

	// box value does not exist: this.whitelist(whitelist).value
	assert
	extract 2 0
	intc 3 // 0
	load 247 // splice start
	substring3
	frame_dig 1 // whitelist: Whitelist
	box_get

	// box value does not exist: this.whitelist(whitelist).value
	assert
	extract 2 0
	dup
	len
	load 247 // splice start
	load 246 // splice byte length
	+
	intc 1 // 8
	-
	swap
	substring3
	concat
	frame_dig 1 // whitelist: Whitelist
	box_get

	// box value does not exist: this.whitelist(whitelist).value
	assert
	extract 2 0
	load 247 // splice start
	load 246 // splice byte length
	intc 1 // 8
	-
	extract3
	swap
	frame_dig 1 // whitelist: Whitelist
	dup
	box_del
	pop
	swap
	dup
	len
	intc 1 // 8
	/
	itob
	extract 6 2
	swap
	concat
	box_put
	frame_bury 2 // spliced: uint64[]

	// examples/arc75/arc75.algo.ts:99
	// assert(spliced[0] === appID)
	frame_dig 2 // spliced: uint64[]
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	frame_dig -3 // appID: uint64
	==
	assert

	// examples/arc75/arc75.algo.ts:101
	// this.sendMBRPayment(preMBR)
	frame_dig 0 // preMBR: uint64
	callsub sendMBRPayment
	retsub

*abi_route_createApplication:
	intc 0 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x467c7cbd // method "addAppToWhiteList(string,uint16,uint64,pay)void"
	pushbytes 0xd198fcb8 // method "setAppWhitelist(string,uint16,uint64[])void"
	pushbytes 0x7c33e832 // method "deleteWhitelist(string,uint16)void"
	pushbytes 0x7e1674ac // method "deleteAppFromWhitelist(string,uint16,uint64,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_addAppToWhiteList *abi_route_setAppWhitelist *abi_route_deleteWhitelist *abi_route_deleteAppFromWhitelist

	// this contract does not implement the given ABI method for call NoOp
	err

*process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub