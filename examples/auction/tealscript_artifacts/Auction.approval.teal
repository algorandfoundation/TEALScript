#pragma version 10
intcblock 1 0 4
bytecblock 0x70726576696f7573426964646572 0x70726576696f7573426964 0x61756374696f6e456e64 0x636c61696d61626c65416d6f756e74 0x617361416d74 0x617361 0x

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *call_OptIn *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// examples/auction/auction.algo.ts:18
	// this.auctionEnd.value = 0
	bytec 2 //  "auctionEnd"
	intc 1 // 0
	app_global_put

	// examples/auction/auction.algo.ts:19
	// this.previousBid.value = 0
	bytec 1 //  "previousBid"
	intc 1 // 0
	app_global_put

	// examples/auction/auction.algo.ts:20
	// this.asaAmt.value = 0
	bytec 4 //  "asaAmt"
	intc 1 // 0
	app_global_put

	// examples/auction/auction.algo.ts:21
	// this.asa.value = AssetID.zeroIndex
	bytec 5 //  "asa"
	intc 1 // 0
	app_global_put

	// examples/auction/auction.algo.ts:24
	// this.previousBidder.value = globals.zeroAddress
	bytec 0 //  "previousBidder"
	global ZeroAddress
	app_global_put
	retsub

// optIntoAsset(uint64)void
*abi_route_optIntoAsset:
	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute optIntoAsset(uint64)void
	callsub optIntoAsset
	intc 0 // 1
	return

// optIntoAsset(asset: AssetID): void
optIntoAsset:
	proto 1 0

	// Only allow app creator to opt the app account into a ASA
	// examples/auction/auction.algo.ts:29
	// verifyAppCallTxn(this.txn, { sender: globals.creatorAddress })
	// verify sender
	txn Sender
	global CreatorAddress
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"globals.creatorAddress"}
	assert

	// Verify a ASA hasn't already been opted into
	// examples/auction/auction.algo.ts:32
	// assert(this.asa.value === AssetID.zeroIndex)
	bytec 5 //  "asa"
	app_global_get
	intc 1 // 0
	==
	assert

	// Save ASA ID in global state
	// examples/auction/auction.algo.ts:35
	// this.asa.value = asset
	bytec 5 //  "asa"
	frame_dig -1 // asset: AssetID
	app_global_put

	// Submit opt-in transaction: 0 asset transfer to self
	// examples/auction/auction.algo.ts:38
	// sendAssetTransfer({
	//       assetReceiver: this.app.address,
	//       xferAsset: asset,
	//       assetAmount: 0,
	//     })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// examples/auction/auction.algo.ts:39
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// examples/auction/auction.algo.ts:40
	// xferAsset: asset
	frame_dig -1 // asset: AssetID
	itxn_field XferAsset

	// examples/auction/auction.algo.ts:41
	// assetAmount: 0
	intc 1 // 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// startAuction(uint64,uint64,axfer)void
*abi_route_startAuction:
	// axfer: axfer
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 2 //  axfer
	==

	// argument 0 (axfer) for startAuction must be a axfer transaction
	assert

	// length: uint64
	txna ApplicationArgs 2
	btoi

	// startingPrice: uint64
	txna ApplicationArgs 1
	btoi

	// execute startAuction(uint64,uint64,axfer)void
	callsub startAuction
	intc 0 // 1
	return

// startAuction(startingPrice: uint64, length: uint64, axfer: AssetTransferTxn): void
startAuction:
	proto 3 0

	// examples/auction/auction.algo.ts:46
	// verifyAppCallTxn(this.txn, { sender: globals.creatorAddress })
	// verify sender
	txn Sender
	global CreatorAddress
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"globals.creatorAddress"}
	assert

	// Ensure the auction hasn't already been started
	// examples/auction/auction.algo.ts:49
	// assert(this.auctionEnd.value === 0)
	bytec 2 //  "auctionEnd"
	app_global_get
	intc 1 // 0
	==
	assert

	// Verify axfer
	// examples/auction/auction.algo.ts:52
	// verifyAssetTransferTxn(axfer, { assetReceiver: this.app.address })
	// verify assetReceiver
	frame_dig -3 // axfer: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"axfer","field":"assetReceiver","expected":"this.app.address"}
	assert

	// Set global state
	// examples/auction/auction.algo.ts:55
	// this.asaAmt.value = axfer.assetAmount
	bytec 4 //  "asaAmt"
	frame_dig -3 // axfer: AssetTransferTxn
	gtxns AssetAmount
	app_global_put

	// examples/auction/auction.algo.ts:56
	// this.auctionEnd.value = globals.latestTimestamp + length
	bytec 2 //  "auctionEnd"
	global LatestTimestamp
	frame_dig -2 // length: uint64
	+
	app_global_put

	// examples/auction/auction.algo.ts:57
	// this.previousBid.value = startingPrice
	bytec 1 //  "previousBid"
	frame_dig -1 // startingPrice: uint64
	app_global_put
	retsub

// pay(receiver: Address, amount: uint64): void
pay:
	proto 2 0

	// examples/auction/auction.algo.ts:61
	// sendPayment({
	//       receiver: receiver,
	//       amount: amount,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// examples/auction/auction.algo.ts:62
	// receiver: receiver
	frame_dig -1 // receiver: Address
	itxn_field Receiver

	// examples/auction/auction.algo.ts:63
	// amount: amount
	frame_dig -2 // amount: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// optInToApplication()void
*abi_route_optInToApplication:
	// execute optInToApplication()void
	callsub optInToApplication
	intc 0 // 1
	return

// optInToApplication(): void
optInToApplication:
	proto 0 0
	retsub

// bid(pay)void
*abi_route_bid:
	// payment: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (payment) for bid must be a pay transaction
	assert

	// execute bid(pay)void
	callsub bid
	intc 0 // 1
	return

// bid(payment: PayTxn): void
bid:
	proto 1 0

	// Ensure auction hasn't ended
	// examples/auction/auction.algo.ts:72
	// assert(globals.latestTimestamp < this.auctionEnd.value)
	global LatestTimestamp
	bytec 2 //  "auctionEnd"
	app_global_get
	<
	assert

	// Verify payment transaction
	// examples/auction/auction.algo.ts:75
	// verifyPayTxn(payment, {
	//       sender: this.txn.sender,
	//       amount: { greaterThan: this.previousBid.value },
	//     })
	// verify sender
	frame_dig -1 // payment: PayTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"payment","field":"sender","expected":"this.txn.sender"}
	assert

	// verify amount
	frame_dig -1 // payment: PayTxn
	gtxns Amount
	bytec 1 //  "previousBid"
	app_global_get
	>

	// transaction verification failed: {"txn":"payment","field":"amount","condition":"greaterThan","expected":">this.previousBid.value"}
	assert

	// Set global state
	// examples/auction/auction.algo.ts:81
	// this.previousBid.value = payment.amount
	bytec 1 //  "previousBid"
	frame_dig -1 // payment: PayTxn
	gtxns Amount
	app_global_put

	// examples/auction/auction.algo.ts:82
	// this.previousBidder.value = payment.sender
	bytec 0 //  "previousBidder"
	frame_dig -1 // payment: PayTxn
	gtxns Sender
	app_global_put

	// Update claimable amount
	// examples/auction/auction.algo.ts:85
	// this.claimableAmount(this.txn.sender).value = payment.amount
	txn Sender
	bytec 3 //  "claimableAmount"
	frame_dig -1 // payment: PayTxn
	gtxns Amount
	app_local_put
	retsub

// claimBids()void
*abi_route_claimBids:
	// execute claimBids()void
	callsub claimBids
	intc 0 // 1
	return

// claimBids(): void
claimBids:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 6 // 0x
	dup

	// examples/auction/auction.algo.ts:89
	// originalAmount = this.claimableAmount(this.txn.sender).value
	txn Sender
	bytec 3 //  "claimableAmount"
	app_local_get
	frame_bury 0 // originalAmount: uint64

	// examples/auction/auction.algo.ts:90
	// amount = originalAmount
	frame_dig 0 // originalAmount: uint64
	frame_bury 1 // amount: uint64

	// subtract previous bid if sender is previous bidder
	// *if0_condition
	// examples/auction/auction.algo.ts:93
	// this.txn.sender === this.previousBidder.value
	txn Sender
	bytec 0 //  "previousBidder"
	app_global_get
	==
	bz *if0_end

	// *if0_consequent
	// examples/auction/auction.algo.ts:93
	// amount = amount - this.previousBid.value
	frame_dig 1 // amount: uint64
	bytec 1 //  "previousBid"
	app_global_get
	-
	frame_bury 1 // amount: uint64

*if0_end:
	// examples/auction/auction.algo.ts:95
	// this.pay(this.txn.sender, amount)
	frame_dig 1 // amount: uint64
	txn Sender
	callsub pay

	// examples/auction/auction.algo.ts:96
	// this.claimableAmount(this.txn.sender).value = originalAmount - amount
	txn Sender
	bytec 3 //  "claimableAmount"
	frame_dig 0 // originalAmount: uint64
	frame_dig 1 // amount: uint64
	-
	app_local_put
	retsub

// claim_asset(uint64)void
*abi_route_claim_asset:
	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute claim_asset(uint64)void
	callsub claim_asset
	intc 0 // 1
	return

// claim_asset(asset: AssetID): void
claim_asset:
	proto 1 0

	// examples/auction/auction.algo.ts:100
	// assert(globals.latestTimestamp > this.auctionEnd.value)
	global LatestTimestamp
	bytec 2 //  "auctionEnd"
	app_global_get
	>
	assert

	// Send ASA to previous bidder
	// examples/auction/auction.algo.ts:103
	// sendAssetTransfer({
	//       assetReceiver: this.previousBidder.value,
	//       xferAsset: asset,
	//       assetAmount: this.asaAmt.value,
	//       assetCloseTo: this.previousBidder.value,
	//     })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// examples/auction/auction.algo.ts:104
	// assetReceiver: this.previousBidder.value
	bytec 0 //  "previousBidder"
	app_global_get
	itxn_field AssetReceiver

	// examples/auction/auction.algo.ts:105
	// xferAsset: asset
	frame_dig -1 // asset: AssetID
	itxn_field XferAsset

	// examples/auction/auction.algo.ts:106
	// assetAmount: this.asaAmt.value
	bytec 4 //  "asaAmt"
	app_global_get
	itxn_field AssetAmount

	// examples/auction/auction.algo.ts:107
	// assetCloseTo: this.previousBidder.value
	bytec 0 //  "previousBidder"
	app_global_get
	itxn_field AssetCloseTo

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	intc 0 // 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0

	// examples/auction/auction.algo.ts:112
	// sendPayment({
	//       receiver: globals.creatorAddress,
	//       closeRemainderTo: globals.creatorAddress,
	//       amount: 0,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// examples/auction/auction.algo.ts:113
	// receiver: globals.creatorAddress
	global CreatorAddress
	itxn_field Receiver

	// examples/auction/auction.algo.ts:114
	// closeRemainderTo: globals.creatorAddress
	global CreatorAddress
	itxn_field CloseRemainderTo

	// examples/auction/auction.algo.ts:115
	// amount: 0
	intc 1 // 0
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x3987f0c1 // method "optIntoAsset(uint64)void"
	pushbytes 0xc2725922 // method "startAuction(uint64,uint64,axfer)void"
	pushbytes 0xdb7fe843 // method "bid(pay)void"
	pushbytes 0x032f650d // method "claimBids()void"
	pushbytes 0x59b2ab26 // method "claim_asset(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_optIntoAsset *abi_route_startAuction *abi_route_bid *abi_route_claimBids *abi_route_claim_asset

	// this contract does not implement the given ABI method for call NoOp
	err

*call_OptIn:
	pushbytes 0x01a3a3ff // method "optInToApplication()void"
	txna ApplicationArgs 0
	match *abi_route_optInToApplication

	// this contract does not implement the given ABI method for call OptIn
	err

*call_DeleteApplication:
	pushbytes 0x2487c32c // method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err