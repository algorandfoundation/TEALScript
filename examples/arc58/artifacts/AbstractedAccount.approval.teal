#pragma version 10
intcblock 1 0 32 6
bytecblock 0x70 0x61 0x 0x63 0x6e 0x0000000000000000 0x0f885493 0x00

// This TEAL was generated by TEALScript v0.107.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 3 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// verifyRekeyToAbstractedAccount(): void
//
// Ensure that by the end of the group the abstracted account has control of its address
verifyRekeyToAbstractedAccount:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x
	dupn 2

	// examples/arc58/arc58.algo.ts:45
	// rekeyedBack = false
	intc 1 // 0
	frame_bury 0 // rekeyedBack: bool

	// examples/arc58/arc58.algo.ts:47
	// for (let i = this.txn.groupIndex; i < this.txnGroup.length; i += 1)
	txn GroupIndex
	frame_bury 1 // i: uint64

*for_0:
	// examples/arc58/arc58.algo.ts:47
	// i < this.txnGroup.length
	frame_dig 1 // i: uint64
	global GroupSize
	<
	bz *for_0_end

	// examples/arc58/arc58.algo.ts:48
	// txn = this.txnGroup[i]
	frame_dig 1 // i: uint64
	frame_bury 2 // txn: txn

	// *if0_condition
	// examples/arc58/arc58.algo.ts:51
	// txn.sender === this.controlledAddress.value && txn.rekeyTo === this.controlledAddress.value
	frame_dig 2 // txn: txn
	gtxns Sender
	bytec 3 //  "c"
	app_global_get
	==
	dup
	bz *skip_and0
	frame_dig 2 // txn: txn
	gtxns RekeyTo
	bytec 3 //  "c"
	app_global_get
	==
	&&

*skip_and0:
	bz *if0_end

	// *if0_consequent
	// examples/arc58/arc58.algo.ts:52
	// rekeyedBack = true
	intc 0 // 1
	frame_bury 0 // rekeyedBack: bool
	b *for_0_end

*if0_end:
	// *if1_condition
	// examples/arc58/arc58.algo.ts:58
	// txn.typeEnum === TransactionType.ApplicationCall &&
	//         txn.applicationID === this.app &&
	//         txn.numAppArgs === 1 &&
	//         txn.applicationArgs[0] === method('arc58_verifyAuthAddr()void')
	frame_dig 2 // txn: txn
	gtxns TypeEnum
	intc 3 //  appl
	==
	dup
	bz *skip_and1
	frame_dig 2 // txn: txn
	gtxns ApplicationID
	txna Applications 0
	==
	&&

*skip_and1:
	dup
	bz *skip_and2
	frame_dig 2 // txn: txn
	gtxns NumAppArgs
	intc 0 // 1
	==
	&&

*skip_and2:
	dup
	bz *skip_and3
	frame_dig 2 // txn: txn
	gtxns ApplicationArgs 0
	bytec 6 //  method "arc58_verifyAuthAddr()void"
	==
	&&

*skip_and3:
	bz *if1_end

	// *if1_consequent
	// examples/arc58/arc58.algo.ts:63
	// rekeyedBack = true
	intc 0 // 1
	frame_bury 0 // rekeyedBack: bool
	b *for_0_end

*if1_end:

*for_0_continue:
	// examples/arc58/arc58.algo.ts:47
	// i += 1
	frame_dig 1 // i: uint64
	intc 0 // 1
	+
	frame_bury 1 // i: uint64
	b *for_0

*for_0_end:
	// examples/arc58/arc58.algo.ts:68
	// assert(rekeyedBack)
	frame_dig 0 // rekeyedBack: bool
	assert
	retsub

// getAuthAddr(): Address
//
// What the value of this.address.value.authAddr should be when this.controlledAddress
// is able to be controlled by this app. It will either be this.app.address or zeroAddress
getAuthAddr:
	proto 0 1

	// examples/arc58/arc58.algo.ts:76
	// return this.controlledAddress.value === this.app.address ? Address.zeroAddress : this.app.address;
	bytec 3 //  "c"
	app_global_get
	global CurrentApplicationAddress
	==
	bz *ternary0_false
	global ZeroAddress
	b *ternary0_end

*ternary0_false:
	global CurrentApplicationAddress

*ternary0_end:
	retsub

// createApplication(address,address)void
*abi_route_createApplication:
	// admin: address
	txna ApplicationArgs 2
	dup
	len
	intc 2 // 32
	==

	// argument 0 (admin) for createApplication must be a address
	assert

	// controlledAddress: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 1 (controlledAddress) for createApplication must be a address
	assert

	// execute createApplication(address,address)void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(controlledAddress: Address, admin: Address): void
//
// Create an abstracted account application.
// This is not part of ARC58 and implementation specific.
//
// @param controlledAddress The address of the abstracted account. If zeroAddress, then the address of the contract account will be used
// @param admin The admin for this app
createApplication:
	proto 2 0

	// examples/arc58/arc58.algo.ts:87
	// verifyAppCallTxn(this.txn, {
	//       sender: { includedIn: [controlledAddress, admin] },
	//     })
	// verify sender
	txn Sender
	frame_dig -1 // controlledAddress: Address
	==
	txn Sender
	frame_dig -2 // admin: Address
	==
	||

	// transaction verification failed: {"txn":{"txnText":"this.txn"},"field":"sender","condition":"includedIn","expected":"[controlledAddress, admin]"}
	assert

	// examples/arc58/arc58.algo.ts:91
	// assert(admin !== controlledAddress)
	frame_dig -2 // admin: Address
	frame_dig -1 // controlledAddress: Address
	!=
	assert

	// examples/arc58/arc58.algo.ts:93
	// this.admin.value = admin
	bytec 1 //  "a"
	frame_dig -2 // admin: Address
	app_global_put

	// examples/arc58/arc58.algo.ts:94
	// this.controlledAddress.value = controlledAddress === Address.zeroAddress ? this.app.address : controlledAddress
	bytec 3 //  "c"
	frame_dig -1 // controlledAddress: Address
	global ZeroAddress
	==
	bz *ternary1_false
	global CurrentApplicationAddress
	b *ternary1_end

*ternary1_false:
	frame_dig -1 // controlledAddress: Address

*ternary1_end:
	app_global_put
	retsub

// arc58_changeAdmin(address)void
*abi_route_arc58_changeAdmin:
	// newAdmin: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 0 (newAdmin) for arc58_changeAdmin must be a address
	assert

	// execute arc58_changeAdmin(address)void
	callsub arc58_changeAdmin
	intc 0 // 1
	return

// arc58_changeAdmin(newAdmin: Address): void
//
// Attempt to change the admin for this app. Some implementations MAY not support this.
//
// @param newAdmin The new admin
arc58_changeAdmin:
	proto 1 0

	// examples/arc58/arc58.algo.ts:103
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	bytec 1 //  "a"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.admin.value"}
	assert

	// examples/arc58/arc58.algo.ts:104
	// this.admin.value = newAdmin
	bytec 1 //  "a"
	frame_dig -1 // newAdmin: Address
	app_global_put
	retsub

// arc58_pluginChangeAdmin(uint64,address,address)void
*abi_route_arc58_pluginChangeAdmin:
	// newAdmin: address
	txna ApplicationArgs 3
	dup
	len
	intc 2 // 32
	==

	// argument 0 (newAdmin) for arc58_pluginChangeAdmin must be a address
	assert

	// allowedCaller: address
	txna ApplicationArgs 2
	dup
	len
	intc 2 // 32
	==

	// argument 1 (allowedCaller) for arc58_pluginChangeAdmin must be a address
	assert

	// plugin: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc58_pluginChangeAdmin(uint64,address,address)void
	callsub arc58_pluginChangeAdmin
	intc 0 // 1
	return

// arc58_pluginChangeAdmin(plugin: AppID, allowedCaller: Address, newAdmin: Address): void
//
// Attempt to change the admin via plugin.
//
// @param plugin The app calling the plugin
// @param allowedCaller The address that triggered the plugin
// @param newAdmin The new admin
arc58_pluginChangeAdmin:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x

	// examples/arc58/arc58.algo.ts:116
	// verifyTxn(this.txn, { sender: plugin.address })
	// verify sender
	txn Sender
	frame_dig -1 // plugin: AppID
	app_params_get AppAddress
	pop
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"plugin.address"}
	assert

	// examples/arc58/arc58.algo.ts:117
	// assert(this.controlledAddress.value.authAddr === plugin.address, 'This plugin is not in control of the account')
	bytec 3 //  "c"
	app_global_get
	acct_params_get AcctAuthAddr
	pop
	frame_dig -1 // plugin: AppID
	app_params_get AppAddress
	pop
	==

	// This plugin is not in control of the account
	assert

	// examples/arc58/arc58.algo.ts:119
	// key: PluginsKey = { application: plugin, allowedCaller: allowedCaller }
	frame_dig -1 // plugin: AppID
	itob
	frame_dig -2 // allowedCaller: Address
	concat
	frame_bury 0 // key: PluginsKey

	// examples/arc58/arc58.algo.ts:120
	// assert(
	//       this.plugins(key).exists && this.plugins(key).value.adminPrivileges,
	//       'This plugin does not have admin privileges'
	//     )
	bytec 0 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_len
	swap
	pop
	dup
	bz *skip_and4
	bytec 0 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	pushint 192
	getbit
	&&

*skip_and4:
	// This plugin does not have admin privileges
	assert

	// examples/arc58/arc58.algo.ts:125
	// this.admin.value = newAdmin
	bytec 1 //  "a"
	frame_dig -3 // newAdmin: Address
	app_global_put
	retsub

// arc58_getAdmin()address
*abi_route_arc58_getAdmin:
	// The ABI return prefix
	pushbytes 0x151f7c75

	// execute arc58_getAdmin()address
	callsub arc58_getAdmin
	concat
	log
	intc 0 // 1
	return

// arc58_getAdmin(): Address
//
// Get the admin of this app. This method SHOULD always be used rather than reading directly from state
// because different implementations may have different ways of determining the admin.
arc58_getAdmin:
	proto 0 1

	// examples/arc58/arc58.algo.ts:133
	// return this.admin.value;
	bytec 1 //  "a"
	app_global_get
	retsub

// arc58_verifyAuthAddr()void
*abi_route_arc58_verifyAuthAddr:
	// execute arc58_verifyAuthAddr()void
	callsub arc58_verifyAuthAddr
	intc 0 // 1
	return

// arc58_verifyAuthAddr(): void
//
// Verify the abstracted account is rekeyed to this app
arc58_verifyAuthAddr:
	proto 0 0

	// examples/arc58/arc58.algo.ts:140
	// assert(this.controlledAddress.value.authAddr === this.getAuthAddr())
	bytec 3 //  "c"
	app_global_get
	acct_params_get AcctAuthAddr
	pop
	callsub getAuthAddr
	==
	assert
	retsub

// arc58_rekeyTo(address,bool)void
*abi_route_arc58_rekeyTo:
	// flash: bool
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 1
	==

	// argument 0 (flash) for arc58_rekeyTo must be a bool
	assert
	intc 1 // 0
	getbit

	// addr: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 1 (addr) for arc58_rekeyTo must be a address
	assert

	// execute arc58_rekeyTo(address,bool)void
	callsub arc58_rekeyTo
	intc 0 // 1
	return

// arc58_rekeyTo(addr: Address, flash: boolean): void
//
// Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
//
// @param addr The address to rekey to
// @param flash Whether or not this should be a flash rekey. If true, the rekey back to the app address must done in the same txn group as this call
arc58_rekeyTo:
	proto 2 0

	// examples/arc58/arc58.algo.ts:150
	// verifyAppCallTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	bytec 1 //  "a"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.admin.value"}
	assert

	// examples/arc58/arc58.algo.ts:152
	// sendPayment({
	//       sender: this.controlledAddress.value,
	//       receiver: addr,
	//       rekeyTo: addr,
	//       note: 'rekeying abstracted account',
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// examples/arc58/arc58.algo.ts:153
	// sender: this.controlledAddress.value
	bytec 3 //  "c"
	app_global_get
	itxn_field Sender

	// examples/arc58/arc58.algo.ts:154
	// receiver: addr
	frame_dig -1 // addr: Address
	itxn_field Receiver

	// examples/arc58/arc58.algo.ts:155
	// rekeyTo: addr
	frame_dig -1 // addr: Address
	itxn_field RekeyTo

	// examples/arc58/arc58.algo.ts:156
	// note: 'rekeying abstracted account'
	pushbytes 0x72656b6579696e672061627374726163746564206163636f756e74 // "rekeying abstracted account"
	itxn_field Note

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// *if2_condition
	// examples/arc58/arc58.algo.ts:159
	// flash
	frame_dig -2 // flash: boolean
	bz *if2_end

	// *if2_consequent
	// examples/arc58/arc58.algo.ts:159
	// this.verifyRekeyToAbstractedAccount()
	callsub verifyRekeyToAbstractedAccount

*if2_end:
	retsub

// pluginCallAllowed(app: AppID, caller: Address): boolean
pluginCallAllowed:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x

	// examples/arc58/arc58.algo.ts:163
	// key: PluginsKey = { application: app, allowedCaller: caller }
	frame_dig -1 // app: AppID
	itob
	frame_dig -2 // caller: Address
	concat
	frame_bury 0 // key: PluginsKey

	// examples/arc58/arc58.algo.ts:165
	// return (
	//       this.plugins(key).exists &&
	//       this.plugins(key).value.lastValidRound >= globals.round &&
	//       globals.round - this.plugins(key).value.lastCalled >= this.plugins(key).value.cooldown
	//     );
	bytec 0 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_len
	swap
	pop
	dup
	bz *skip_and5
	bytec 0 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	global Round
	>=
	&&

*skip_and5:
	dup
	bz *skip_and6
	global Round
	bytec 0 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	extract 16 8
	btoi
	-
	bytec 0 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	>=
	&&

*skip_and6:
	// set the subroutine return value
	frame_bury 0
	retsub

// arc58_rekeyToPlugin(uint64)void
*abi_route_arc58_rekeyToPlugin:
	// plugin: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc58_rekeyToPlugin(uint64)void
	callsub arc58_rekeyToPlugin
	intc 0 // 1
	return

// arc58_rekeyToPlugin(plugin: AppID): void
//
// Temporarily rekey to an approved plugin app address
//
// @param plugin The app to rekey to
arc58_rekeyToPlugin:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x

	// examples/arc58/arc58.algo.ts:178
	// globalAllowed = this.pluginCallAllowed(plugin, Address.zeroAddress)
	global ZeroAddress
	frame_dig -1 // plugin: AppID
	callsub pluginCallAllowed
	frame_bury 0 // globalAllowed: bool

	// *if3_condition
	// examples/arc58/arc58.algo.ts:180
	// !globalAllowed
	frame_dig 0 // globalAllowed: bool
	!
	bz *if3_end

	// *if3_consequent
	// examples/arc58/arc58.algo.ts:181
	// assert(this.pluginCallAllowed(plugin, this.txn.sender), 'This sender is not allowed to trigger this plugin')
	txn Sender
	frame_dig -1 // plugin: AppID
	callsub pluginCallAllowed

	// This sender is not allowed to trigger this plugin
	assert

*if3_end:
	// examples/arc58/arc58.algo.ts:183
	// sendPayment({
	//       sender: this.controlledAddress.value,
	//       receiver: this.controlledAddress.value,
	//       rekeyTo: plugin.address,
	//       note: 'rekeying to plugin app',
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// examples/arc58/arc58.algo.ts:184
	// sender: this.controlledAddress.value
	bytec 3 //  "c"
	app_global_get
	itxn_field Sender

	// examples/arc58/arc58.algo.ts:185
	// receiver: this.controlledAddress.value
	bytec 3 //  "c"
	app_global_get
	itxn_field Receiver

	// examples/arc58/arc58.algo.ts:186
	// rekeyTo: plugin.address
	frame_dig -1 // plugin: AppID
	app_params_get AppAddress
	pop
	itxn_field RekeyTo

	// examples/arc58/arc58.algo.ts:187
	// note: 'rekeying to plugin app'
	pushbytes 0x72656b6579696e6720746f20706c7567696e20617070 // "rekeying to plugin app"
	itxn_field Note

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// examples/arc58/arc58.algo.ts:190
	// this.plugins({
	//       application: plugin,
	//       allowedCaller: globalAllowed ? Address.zeroAddress : this.txn.sender,
	//     }).value.lastCalled = globals.round
	bytec 0 //  "p"
	frame_dig -1 // plugin: AppID
	itob
	frame_dig 0 // globalAllowed: bool
	bz *ternary3_false
	global ZeroAddress
	b *ternary3_end

*ternary3_false:
	txn Sender

*ternary3_end:
	concat
	concat
	box_get

	// box value does not exist: this.plugins({ application: plugin, allowedCaller: globalAllowed ? Address.zeroAddress : this.txn.sender, }).value
	assert
	store 255 // full array
	load 255 // full array
	pushint 16
	global Round
	itob
	replace3
	bytec 0 //  "p"
	frame_dig -1 // plugin: AppID
	itob
	frame_dig 0 // globalAllowed: bool
	bz *ternary5_false
	global ZeroAddress
	b *ternary5_end

*ternary5_false:
	txn Sender

*ternary5_end:
	concat
	concat
	swap
	box_put

	// examples/arc58/arc58.algo.ts:195
	// this.verifyRekeyToAbstractedAccount()
	callsub verifyRekeyToAbstractedAccount
	retsub

// arc58_rekeyToNamedPlugin(string)void
*abi_route_arc58_rekeyToNamedPlugin:
	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute arc58_rekeyToNamedPlugin(string)void
	callsub arc58_rekeyToNamedPlugin
	intc 0 // 1
	return

// arc58_rekeyToNamedPlugin(name: string): void
//
// Temporarily rekey to a named plugin app address
//
// @param name The name of the plugin to rekey to
arc58_rekeyToNamedPlugin:
	proto 1 0

	// examples/arc58/arc58.algo.ts:204
	// this.arc58_rekeyToPlugin(this.namedPlugins(name).value.application)
	intc 1 // 0
	pushint 8
	bytec 4 //  "n"
	frame_dig -1 // name: string
	concat
	cover 2
	box_extract
	btoi
	callsub arc58_rekeyToPlugin
	retsub

// arc58_addPlugin(uint64,address,uint64,uint64,bool)void
*abi_route_arc58_addPlugin:
	// adminPrivileges: bool
	txna ApplicationArgs 5
	dup
	len
	intc 0 // 1
	==

	// argument 0 (adminPrivileges) for arc58_addPlugin must be a bool
	assert
	intc 1 // 0
	getbit

	// cooldown: uint64
	txna ApplicationArgs 4
	btoi

	// lastValidRound: uint64
	txna ApplicationArgs 3
	btoi

	// allowedCaller: address
	txna ApplicationArgs 2
	dup
	len
	intc 2 // 32
	==

	// argument 3 (allowedCaller) for arc58_addPlugin must be a address
	assert

	// app: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc58_addPlugin(uint64,address,uint64,uint64,bool)void
	callsub arc58_addPlugin
	intc 0 // 1
	return

// arc58_addPlugin(app: AppID, allowedCaller: Address, lastValidRound: uint64, cooldown: uint64, adminPrivileges: boolean): void
//
// Add an app to the list of approved plugins
//
// @param app The app to add
// @param allowedCaller The address of that's allowed to call the app
// or the global zero address for all addresses
// @param lastValidRound The round when the permission expires
// @param cooldown  The number of rounds that must pass before the plugin can be called again
// @param adminPrivileges Whether the plugin has permissions to change the admin account
arc58_addPlugin:
	proto 5 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x

	// examples/arc58/arc58.algo.ts:224
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	bytec 1 //  "a"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.admin.value"}
	assert

	// examples/arc58/arc58.algo.ts:225
	// key: PluginsKey = { application: app, allowedCaller: allowedCaller }
	frame_dig -1 // app: AppID
	itob
	frame_dig -2 // allowedCaller: Address
	concat
	frame_bury 0 // key: PluginsKey

	// examples/arc58/arc58.algo.ts:226
	// this.plugins(key).value = {
	//       lastValidRound: lastValidRound,
	//       cooldown: cooldown,
	//       lastCalled: 0,
	//       adminPrivileges: adminPrivileges,
	//     }
	bytec 0 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	frame_dig -3 // lastValidRound: uint64
	itob
	frame_dig -4 // cooldown: uint64
	itob
	concat
	bytec 5 // 0x0000000000000000
	concat
	bytec 7 // 0x00
	intc 1 // 0
	frame_dig -5 // adminPrivileges: boolean
	setbit
	concat
	box_put
	retsub

// arc58_removePlugin(uint64,address)void
*abi_route_arc58_removePlugin:
	// allowedCaller: address
	txna ApplicationArgs 2
	dup
	len
	intc 2 // 32
	==

	// argument 0 (allowedCaller) for arc58_removePlugin must be a address
	assert

	// app: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc58_removePlugin(uint64,address)void
	callsub arc58_removePlugin
	intc 0 // 1
	return

// arc58_removePlugin(app: AppID, allowedCaller: Address): void
//
// Remove an app from the list of approved plugins
//
// @param app The app to remove
arc58_removePlugin:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x

	// examples/arc58/arc58.algo.ts:240
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	bytec 1 //  "a"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.admin.value"}
	assert

	// examples/arc58/arc58.algo.ts:242
	// key: PluginsKey = { application: app, allowedCaller: allowedCaller }
	frame_dig -1 // app: AppID
	itob
	frame_dig -2 // allowedCaller: Address
	concat
	frame_bury 0 // key: PluginsKey

	// examples/arc58/arc58.algo.ts:243
	// this.plugins(key).delete()
	bytec 0 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_del
	retsub

// arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void
*abi_route_arc58_addNamedPlugin:
	// adminPrivileges: bool
	txna ApplicationArgs 6
	dup
	len
	intc 0 // 1
	==

	// argument 0 (adminPrivileges) for arc58_addNamedPlugin must be a bool
	assert
	intc 1 // 0
	getbit

	// cooldown: uint64
	txna ApplicationArgs 5
	btoi

	// lastValidRound: uint64
	txna ApplicationArgs 4
	btoi

	// allowedCaller: address
	txna ApplicationArgs 3
	dup
	len
	intc 2 // 32
	==

	// argument 3 (allowedCaller) for arc58_addNamedPlugin must be a address
	assert

	// app: uint64
	txna ApplicationArgs 2
	btoi

	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void
	callsub arc58_addNamedPlugin
	intc 0 // 1
	return

// arc58_addNamedPlugin(name: string, app: AppID, allowedCaller: Address, lastValidRound: uint64, cooldown: uint64, adminPrivileges: boolean): void
//
// Add a named plugin
//
// @param app The plugin app
// @param name The plugin name
// @param allowedCaller The address of that's allowed to call the app
// or the global zero address for all addresses
// @param lastValidRound The round when the permission expires
// @param cooldown  The number of rounds that must pass before the plugin can be called again
// @param adminPrivileges Whether the plugin has permissions to change the admin account
arc58_addNamedPlugin:
	proto 6 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x

	// examples/arc58/arc58.algo.ts:265
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	bytec 1 //  "a"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.admin.value"}
	assert

	// examples/arc58/arc58.algo.ts:266
	// assert(!this.namedPlugins(name).exists)
	bytec 4 //  "n"
	frame_dig -1 // name: string
	concat
	box_len
	swap
	pop
	!
	assert

	// examples/arc58/arc58.algo.ts:268
	// key: PluginsKey = { application: app, allowedCaller: allowedCaller }
	frame_dig -2 // app: AppID
	itob
	frame_dig -3 // allowedCaller: Address
	concat
	frame_bury 0 // key: PluginsKey

	// examples/arc58/arc58.algo.ts:269
	// this.namedPlugins(name).value = key
	bytec 4 //  "n"
	frame_dig -1 // name: string
	concat
	frame_dig 0 // key: PluginsKey
	box_put

	// examples/arc58/arc58.algo.ts:270
	// this.plugins(key).value = {
	//       lastValidRound: lastValidRound,
	//       cooldown: cooldown,
	//       lastCalled: 0,
	//       adminPrivileges: adminPrivileges,
	//     }
	bytec 0 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	frame_dig -4 // lastValidRound: uint64
	itob
	frame_dig -5 // cooldown: uint64
	itob
	concat
	bytec 5 // 0x0000000000000000
	concat
	bytec 7 // 0x00
	intc 1 // 0
	frame_dig -6 // adminPrivileges: boolean
	setbit
	concat
	box_put
	retsub

// arc58_removeNamedPlugin(string)void
*abi_route_arc58_removeNamedPlugin:
	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute arc58_removeNamedPlugin(string)void
	callsub arc58_removeNamedPlugin
	intc 0 // 1
	return

// arc58_removeNamedPlugin(name: string): void
//
// Remove a named plugin
//
// @param name The plugin name
arc58_removeNamedPlugin:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x

	// examples/arc58/arc58.algo.ts:284
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	bytec 1 //  "a"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.admin.value"}
	assert

	// examples/arc58/arc58.algo.ts:286
	// app = this.namedPlugins(name).value
	bytec 4 //  "n"
	frame_dig -1 // name: string
	concat
	frame_bury 0 // storage key//app

	// examples/arc58/arc58.algo.ts:287
	// this.namedPlugins(name).delete()
	bytec 4 //  "n"
	frame_dig -1 // name: string
	concat
	box_del

	// examples/arc58/arc58.algo.ts:288
	// this.plugins(app).delete()
	bytec 0 //  "p"
	frame_dig 0 // storage key//app
	box_get

	// box value does not exist: this.namedPlugins(name).value
	assert
	concat
	box_del
	retsub

*create_NoOp:
	pushbytes 0xb4c77d71 // method "createApplication(address,address)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xd24b7556 // method "arc58_changeAdmin(address)void"
	pushbytes 0x5fa449c6 // method "arc58_pluginChangeAdmin(uint64,address,address)void"
	pushbytes 0x13bc44e4 // method "arc58_getAdmin()address"
	bytec 6 //  method "arc58_verifyAuthAddr()void"
	pushbytes 0xc95a5d3d // method "arc58_rekeyTo(address,bool)void"
	pushbytes 0x7c766ddc // method "arc58_rekeyToPlugin(uint64)void"
	pushbytes 0x56f28b58 // method "arc58_rekeyToNamedPlugin(string)void"
	pushbytes 0xd12dcb61 // method "arc58_addPlugin(uint64,address,uint64,uint64,bool)void"
	pushbytes 0x4d372355 // method "arc58_removePlugin(uint64,address)void"
	pushbytes 0x8a72a750 // method "arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void"
	pushbytes 0xe350b9d4 // method "arc58_removeNamedPlugin(string)void"
	txna ApplicationArgs 0
	match *abi_route_arc58_changeAdmin *abi_route_arc58_pluginChangeAdmin *abi_route_arc58_getAdmin *abi_route_arc58_verifyAuthAddr *abi_route_arc58_rekeyTo *abi_route_arc58_rekeyToPlugin *abi_route_arc58_rekeyToNamedPlugin *abi_route_arc58_addPlugin *abi_route_arc58_removePlugin *abi_route_arc58_addNamedPlugin *abi_route_arc58_removeNamedPlugin

	// this contract does not implement the given ABI method for call NoOp
	err