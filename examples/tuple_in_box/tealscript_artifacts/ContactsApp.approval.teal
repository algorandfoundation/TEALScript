#pragma version 10
intcblock 1 0 2 32
bytecblock 0x 0x0004

// This TEAL was generated by TEALScript v0.107.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// setMyContact(string,string)void
*abi_route_setMyContact:
	// company: string
	txna ApplicationArgs 2
	extract 2 0

	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute setMyContact(string,string)void
	callsub setMyContact
	intc 0 // 1
	return

// setMyContact(name: string, company: string): void
setMyContact:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// examples/tuple_in_box/app.algo.ts:12
	// contact: Contact = { name: name, company: company }
	bytec 0 //  initial head
	bytec 0 //  initial tail
	bytec 1 //  initial head offset
	frame_dig -1 // name: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -2 // company: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury 0 // contact: Contact

	// examples/tuple_in_box/app.algo.ts:14
	// this.myContact.value = contact
	pushbytes 0x6d79436f6e74616374 // "myContact"
	frame_dig 0 // contact: Contact
	app_global_put

	// examples/tuple_in_box/app.algo.ts:15
	// this.contacts(this.txn.sender).value = contact
	txn Sender
	dup
	box_del
	pop
	frame_dig 0 // contact: Contact
	box_put
	retsub

// addContact(string,string,address)void
*abi_route_addContact:
	// address: address
	txna ApplicationArgs 3
	dup
	len
	intc 3 // 32
	==

	// argument 0 (address) for addContact must be a address
	assert

	// company: string
	txna ApplicationArgs 2
	extract 2 0

	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute addContact(string,string,address)void
	callsub addContact
	intc 0 // 1
	return

// addContact(name: string, company: string, address: Address): void
addContact:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// examples/tuple_in_box/app.algo.ts:19
	// contact: Contact = { name: name, company: company }
	bytec 0 //  initial head
	bytec 0 //  initial tail
	bytec 1 //  initial head offset
	frame_dig -1 // name: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -2 // company: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury 0 // contact: Contact

	// examples/tuple_in_box/app.algo.ts:20
	// this.contacts(address).value = contact
	frame_dig -3 // address: Address
	dup
	box_del
	pop
	frame_dig 0 // contact: Contact
	box_put
	retsub

// updateContactField(string,string,address)void
*abi_route_updateContactField:
	// address: address
	txna ApplicationArgs 3
	dup
	len
	intc 3 // 32
	==

	// argument 0 (address) for updateContactField must be a address
	assert

	// value: string
	txna ApplicationArgs 2
	extract 2 0

	// field: string
	txna ApplicationArgs 1
	extract 2 0

	// execute updateContactField(string,string,address)void
	callsub updateContactField
	intc 0 // 1
	return

// updateContactField(field: string, value: string, address: Address): void
updateContactField:
	proto 3 0

	// *if0_condition
	// examples/tuple_in_box/app.algo.ts:24
	// field === 'name'
	frame_dig -1 // field: string
	pushbytes 0x6e616d65 // "name"
	==
	bz *if0_elseif1_condition

	// *if0_consequent
	// examples/tuple_in_box/app.algo.ts:25
	// this.contacts(address).value.name = value
	frame_dig -3 // address: Address
	box_get

	// box value does not exist: this.contacts(address).value
	assert
	store 255 // full array
	intc 1 // 0
	dup
	store 251 // element head offset
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup
	store 254 // element start
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 0 //  get type length
	* // multiply by type length
	intc 2 // 2
	+ // add two for length
	store 253 // element length
	load 255 // full array
	intc 1 // 0
	load 254 // element start
	substring3
	frame_dig -2 // value: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	dup
	store 252 // new element
	load 255 // full array
	load 254 // element start
	load 253 // element length
	+ // get end of Element
	load 255 // full array
	len
	substring3
	concat
	concat
	store 255 // full array
	callsub *get_length_difference
	load 250 // length difference
	load 251 // element head offset
	intc 2 // 2
	+ // head ofset
	callsub *update_dynamic_head
	load 255 // full array
	frame_dig -3 // address: Address
	dup
	box_del
	pop
	swap
	box_put
	b *if0_end

*if0_elseif1_condition:
	// examples/tuple_in_box/app.algo.ts:26
	// field === 'company'
	frame_dig -1 // field: string
	pushbytes 0x636f6d70616e79 // "company"
	==
	bz *if0_else

	// *if0_elseif1_consequent
	// examples/tuple_in_box/app.algo.ts:27
	// this.contacts(address).value.company = value
	frame_dig -3 // address: Address
	box_get

	// box value does not exist: this.contacts(address).value
	assert
	store 255 // full array
	intc 2 // 2
	dup
	store 251 // element head offset
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup
	store 254 // element start
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 0 //  get type length
	* // multiply by type length
	intc 2 // 2
	+ // add two for length
	store 253 // element length
	load 255 // full array
	intc 1 // 0
	load 254 // element start
	substring3
	frame_dig -2 // value: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	dup
	store 252 // new element
	load 255 // full array
	load 254 // element start
	load 253 // element length
	+ // get end of Element
	load 255 // full array
	len
	substring3
	concat
	concat
	store 255 // full array
	callsub *get_length_difference
	load 255 // full array
	frame_dig -3 // address: Address
	dup
	box_del
	pop
	swap
	box_put
	b *if0_end

*if0_else:
	// Invalid field
	err

*if0_end:
	retsub

// verifyContactName(string,address)void
*abi_route_verifyContactName:
	// address: address
	txna ApplicationArgs 2
	dup
	len
	intc 3 // 32
	==

	// argument 0 (address) for verifyContactName must be a address
	assert

	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute verifyContactName(string,address)void
	callsub verifyContactName
	intc 0 // 1
	return

// verifyContactName(name: string, address: Address): void
verifyContactName:
	proto 2 0

	// examples/tuple_in_box/app.algo.ts:32
	// assert(this.contacts(address).value.name === name)
	frame_dig -2 // address: Address
	box_get

	// box value does not exist: this.contacts(address).value
	assert
	store 255 // full array
	intc 1 // 0
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 0 //  get type length
	* // multiply by type length
	intc 2 // 2
	+ // add two for length
	extract3
	extract 2 0
	frame_dig -1 // name: string
	==
	assert
	retsub

*abi_route_createApplication:
	intc 0 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x92ccf99b // method "setMyContact(string,string)void"
	pushbytes 0x495acbf7 // method "addContact(string,string,address)void"
	pushbytes 0xfa4e8f93 // method "updateContactField(string,string,address)void"
	pushbytes 0x8a30b87e // method "verifyContactName(string,address)void"
	txna ApplicationArgs 0
	match *abi_route_setMyContact *abi_route_addContact *abi_route_updateContactField *abi_route_verifyContactName

	// this contract does not implement the given ABI method for call NoOp
	err

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

*update_dynamic_head:
	proto 2 0
	frame_dig -2 // length difference
	load 255 // full array
	frame_dig -1 // dynamic array offset
	extract_uint16 // extract dynamic array offset
	load 249 // subtract head difference
	bz *subtract_head_difference
	+ // add difference to offset
	b *end_calc_new_head

*subtract_head_difference:
	swap
	- // subtract difference from offet

*end_calc_new_head:
	itob // convert to bytes
	extract 6 2 // convert to uint16
	load 255 // full array
	swap
	frame_dig -1 // offset
	swap
	replace3 // update offset
	store 255 // full array
	retsub

*get_length_difference:
	load 252 // new element
	len // length of new element
	load 253 // element length
	<
	bnz *swapped_difference
	load 252 // new element
	len // length of new element
	load 253 // element length
	intc 0 // 1
	store 249 // subtract head difference
	b *get_difference

*swapped_difference:
	load 253 // element length
	load 252 // new element
	len // length of new element
	intc 1 // 0
	store 249 // subtract head difference

*get_difference:
	- // get length difference
	store 250 // length difference
	retsub