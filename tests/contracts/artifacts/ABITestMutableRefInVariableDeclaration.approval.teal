#pragma version 10
intcblock 2 8 0 1
bytecblock 0x

// This TEAL was generated by TEALScript v0.106.3
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// mutableRefInVariableDeclaration()(uint64,uint64)
*abi_route_mutableRefInVariableDeclaration:
	// The ABI return prefix
	pushbytes 0x151f7c75

	// execute mutableRefInVariableDeclaration()(uint64,uint64)
	callsub mutableRefInVariableDeclaration
	concat
	log
	intc 3 // 1
	return

// mutableRefInVariableDeclaration(): [uint64, uint64]
mutableRefInVariableDeclaration:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// tests/contracts/abi.algo.ts:1733
	// arrArr: uint64[][] = [[1, 2, 3]]
	bytec 0 //  initial head
	bytec 0 //  initial tail
	pushbytes 0x0002 // initial head offset
	pushbytes 0x0003000000000000000100000000000000020000000000000003
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	pushbytes 0x0001
	swap
	concat
	frame_bury 0 // arrArr: uint64[][]

	// tests/contracts/abi.algo.ts:1735
	// x = arrArr[0]
	// tests/contracts/abi.algo.ts:1737
	// arrArr[0][0] = 7
	frame_dig 0 // arrArr: uint64[][]
	store 255 // full array
	load 255 // full array
	intc 0 // 2
	extract_uint16
	intc 2 //  acc * typeLength
	+
	intc 0 // 2
	+ // add two for length
	load 255 // full array
	swap
	pushbytes 0x0000000000000007
	replace3
	frame_bury 0 // arrArr: uint64[][]

	// tests/contracts/abi.algo.ts:1739
	// y = arrArr[0]
	// tests/contracts/abi.algo.ts:1740
	// y[1] = 8
	frame_dig 0 // arrArr: uint64[][]
	store 255 // full array
	load 255 // full array
	intc 0 // 2
	extract_uint16
	intc 1 //  acc * typeLength
	+
	intc 0 // 2
	+ // add two for length
	load 255 // full array
	swap
	pushbytes 0x0000000000000008
	replace3
	frame_bury 0 // y: uint64[][]

	// tests/contracts/abi.algo.ts:1742
	// return [x[0], arrArr[0][1]];
	frame_dig 0 // arrArr: uint64[][]
	store 255 // full array
	load 255 // full array
	intc 0 // 2
	extract_uint16
	intc 2 //  acc * typeLength
	+
	intc 0 // 2
	+ // add two for length
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	itob
	frame_dig 0 // arrArr: uint64[][]
	store 255 // full array
	load 255 // full array
	intc 0 // 2
	extract_uint16
	intc 1 //  acc * typeLength
	+
	intc 0 // 2
	+ // add two for length
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	itob
	concat

	// set the subroutine return value
	frame_bury 0
	retsub

*abi_route_createApplication:
	intc 3 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xfa53386f // method "mutableRefInVariableDeclaration()(uint64,uint64)"
	txna ApplicationArgs 0
	match *abi_route_mutableRefInVariableDeclaration

	// this contract does not implement the given ABI method for call NoOp
	err

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub