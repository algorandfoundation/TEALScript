#pragma version 10
intcblock 2 1 0 4 6
bytecblock 0x 0x000c48656c6c6f20576f726c6421 0x0002000a000b 0x0002000e000f 0x00021011

// This TEAL was generated by TEALScript v0.106.3
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 4 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// updateStringInTuple()(uint8,uint16[],string,uint16[],uint8[])
*abi_route_updateStringInTuple:
	// The ABI return prefix
	pushbytes 0x151f7c75

	// execute updateStringInTuple()(uint8,uint16[],string,uint16[],uint8[])
	callsub updateStringInTuple
	concat
	log
	intc 1 // 1
	return

// updateStringInTuple(): [uint<8>, uint16[], string, uint16[], uint<8>[]]
updateStringInTuple:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// tests/contracts/abi.algo.ts:560
	// a: [uint<8>, uint16[], string, uint16[], uint<8>[]] = [9, [8], 'Hi?', [6], [5]]
	bytec 0 //  initial head
	bytec 0 //  initial tail
	pushbytes 0x0009 // initial head offset
	pushbytes 0x09
	callsub *process_static_tuple_element
	pushbytes 0x00010008
	callsub *process_dynamic_tuple_element
	pushbytes 0x000348693f
	callsub *process_dynamic_tuple_element
	pushbytes 0x00010006
	callsub *process_dynamic_tuple_element
	pushbytes 0x000105
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury 0 // a: [uint<8>, uint16[], string, uint16[], uint<8>[]]

	// tests/contracts/abi.algo.ts:562
	// a[0] = 99 as uint<8>
	frame_dig 0 // a: [uint<8>, uint16[], string, uint16[], uint<8>[]]
	store 255 // full array
	load 255 // full array
	pushbytes 0x63
	replace2 0
	frame_bury 0 // a: [uint<8>, uint16[], string, uint16[], uint<8>[]]

	// tests/contracts/abi.algo.ts:563
	// a[1] = [10, 11]
	frame_dig 0 // a: [uint<8>, uint16[], string, uint16[], uint<8>[]]
	store 255 // full array
	intc 1 // 1
	dup
	store 251 // element head offset
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup
	store 254 // element start
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 0 //  get type length
	* // multiply by type length
	intc 0 // 2
	+ // add two for length
	store 253 // element length
	load 255 // full array
	intc 2 // 0
	load 254 // element start
	substring3
	bytec 2 // 0x0002000a000b
	dup
	store 252 // new element
	load 255 // full array
	load 254 // element start
	load 253 // element length
	+ // get end of Element
	load 255 // full array
	len
	substring3
	concat
	concat
	store 255 // full array
	callsub *get_length_difference
	load 250 // length difference
	load 251 // element head offset
	intc 0 // 2
	+ // head ofset
	callsub *update_dynamic_head
	load 250 // length difference
	load 251 // element head offset
	intc 3 // 4
	+ // head ofset
	callsub *update_dynamic_head
	load 250 // length difference
	load 251 // element head offset
	intc 4 // 6
	+ // head ofset
	callsub *update_dynamic_head
	load 255 // full array
	frame_bury 0 // a: [uint<8>, uint16[], string, uint16[], uint<8>[]]

	// tests/contracts/abi.algo.ts:564
	// a[2] = 'Hello World!'
	frame_dig 0 // a: [uint<8>, uint16[], string, uint16[], uint<8>[]]
	store 255 // full array
	pushint 3
	dup
	store 251 // element head offset
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup
	store 254 // element start
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 1 //  get type length
	* // multiply by type length
	intc 0 // 2
	+ // add two for length
	store 253 // element length
	load 255 // full array
	intc 2 // 0
	load 254 // element start
	substring3
	bytec 1 // 0x000c48656c6c6f20576f726c6421
	dup
	store 252 // new element
	load 255 // full array
	load 254 // element start
	load 253 // element length
	+ // get end of Element
	load 255 // full array
	len
	substring3
	concat
	concat
	store 255 // full array
	callsub *get_length_difference
	load 250 // length difference
	load 251 // element head offset
	intc 0 // 2
	+ // head ofset
	callsub *update_dynamic_head
	load 250 // length difference
	load 251 // element head offset
	intc 3 // 4
	+ // head ofset
	callsub *update_dynamic_head
	load 255 // full array
	frame_bury 0 // a: [uint<8>, uint16[], string, uint16[], uint<8>[]]

	// tests/contracts/abi.algo.ts:565
	// a[3] = [14, 15]
	frame_dig 0 // a: [uint<8>, uint16[], string, uint16[], uint<8>[]]
	store 255 // full array
	pushint 5
	dup
	store 251 // element head offset
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup
	store 254 // element start
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 0 //  get type length
	* // multiply by type length
	intc 0 // 2
	+ // add two for length
	store 253 // element length
	load 255 // full array
	intc 2 // 0
	load 254 // element start
	substring3
	bytec 3 // 0x0002000e000f
	dup
	store 252 // new element
	load 255 // full array
	load 254 // element start
	load 253 // element length
	+ // get end of Element
	load 255 // full array
	len
	substring3
	concat
	concat
	store 255 // full array
	callsub *get_length_difference
	load 250 // length difference
	load 251 // element head offset
	intc 0 // 2
	+ // head ofset
	callsub *update_dynamic_head
	load 255 // full array
	frame_bury 0 // a: [uint<8>, uint16[], string, uint16[], uint<8>[]]

	// tests/contracts/abi.algo.ts:566
	// a[4] = [16, 17]
	frame_dig 0 // a: [uint<8>, uint16[], string, uint16[], uint<8>[]]
	store 255 // full array
	pushint 7
	dup
	store 251 // element head offset
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup
	store 254 // element start
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 1 //  get type length
	* // multiply by type length
	intc 0 // 2
	+ // add two for length
	store 253 // element length
	load 255 // full array
	intc 2 // 0
	load 254 // element start
	substring3
	bytec 4 // 0x00021011
	dup
	store 252 // new element
	load 255 // full array
	load 254 // element start
	load 253 // element length
	+ // get end of Element
	load 255 // full array
	len
	substring3
	concat
	concat
	store 255 // full array
	callsub *get_length_difference
	load 255 // full array
	frame_bury 0 // a: [uint<8>, uint16[], string, uint16[], uint<8>[]]

	// tests/contracts/abi.algo.ts:568
	// return a;
	frame_dig 0 // a: [uint<8>, uint16[], string, uint16[], uint<8>[]]

	// set the subroutine return value
	frame_bury 0
	retsub

*abi_route_createApplication:
	intc 1 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xf1fc2586 // method "updateStringInTuple()(uint8,uint16[],string,uint16[],uint8[])"
	txna ApplicationArgs 0
	match *abi_route_updateStringInTuple

	// this contract does not implement the given ABI method for call NoOp
	err

*process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

*update_dynamic_head:
	proto 2 0
	frame_dig -2 // length difference
	load 255 // full array
	frame_dig -1 // dynamic array offset
	extract_uint16 // extract dynamic array offset
	load 249 // subtract head difference
	bz *subtract_head_difference
	+ // add difference to offset
	b *end_calc_new_head

*subtract_head_difference:
	swap
	- // subtract difference from offet

*end_calc_new_head:
	itob // convert to bytes
	extract 6 2 // convert to uint16
	load 255 // full array
	swap
	frame_dig -1 // offset
	swap
	replace3 // update offset
	store 255 // full array
	retsub

*get_length_difference:
	load 252 // new element
	len // length of new element
	load 253 // element length
	<
	bnz *swapped_difference
	load 252 // new element
	len // length of new element
	load 253 // element length
	intc 1 // 1
	store 249 // subtract head difference
	b *get_difference

*swapped_difference:
	load 253 // element length
	load 252 // new element
	len // length of new element
	intc 2 // 0
	store 249 // subtract head difference

*get_difference:
	- // get length difference
	store 250 // length difference
	retsub