#pragma version 10
intcblock 1 6 2 3 4 5

// This TEAL was generated by TEALScript v0.106.3
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 1 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// txnTypes(txn,appl,acfg,afrz,axfer,keyreg,pay)void
*abi_route_txnTypes:
	// p: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (p) for txnTypes must be a pay transaction
	assert

	// kr: keyreg
	txn GroupIndex
	intc 2 // 2
	-
	dup
	gtxns TypeEnum
	intc 2 //  keyreg
	==

	// argument 1 (kr) for txnTypes must be a keyreg transaction
	assert

	// at: axfer
	txn GroupIndex
	intc 3 // 3
	-
	dup
	gtxns TypeEnum
	intc 4 //  axfer
	==

	// argument 2 (at) for txnTypes must be a axfer transaction
	assert

	// af: afrz
	txn GroupIndex
	intc 4 // 4
	-
	dup
	gtxns TypeEnum
	intc 5 //  afrz
	==

	// argument 3 (af) for txnTypes must be a afrz transaction
	assert

	// ac: acfg
	txn GroupIndex
	intc 5 // 5
	-
	dup
	gtxns TypeEnum
	intc 3 //  acfg
	==

	// argument 4 (ac) for txnTypes must be a acfg transaction
	assert

	// a: appl
	txn GroupIndex
	intc 1 // 6
	-
	dup
	gtxns TypeEnum
	intc 1 //  appl
	==

	// argument 5 (a) for txnTypes must be a appl transaction
	assert

	// t: txn
	txn GroupIndex
	pushint 7
	-

	// execute txnTypes(txn,appl,acfg,afrz,axfer,keyreg,pay)void
	callsub txnTypes
	intc 0 // 1
	return

// txnTypes(t: Txn, a: AppCallTxn, ac: AssetConfigTxn, af: AssetFreezeTxn, at: AssetTransferTxn, kr: KeyRegTxn, p: PayTxn): void
txnTypes:
	proto 7 0

	// tests/contracts/abi.algo.ts:726
	// assert(t.sender === a.sender)
	frame_dig -1 // t: Txn
	gtxns Sender
	frame_dig -2 // a: AppCallTxn
	gtxns Sender
	==
	assert

	// tests/contracts/abi.algo.ts:727
	// assert(ac.sender === af.sender)
	frame_dig -3 // ac: AssetConfigTxn
	gtxns Sender
	frame_dig -4 // af: AssetFreezeTxn
	gtxns Sender
	==
	assert

	// tests/contracts/abi.algo.ts:728
	// assert(at.sender === kr.sender)
	frame_dig -5 // at: AssetTransferTxn
	gtxns Sender
	frame_dig -6 // kr: KeyRegTxn
	gtxns Sender
	==
	assert

	// tests/contracts/abi.algo.ts:729
	// assert(p.sender === t.sender)
	frame_dig -7 // p: PayTxn
	gtxns Sender
	frame_dig -1 // t: Txn
	gtxns Sender
	==
	assert
	retsub

*abi_route_createApplication:
	intc 0 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x840337ef // method "txnTypes(txn,appl,acfg,afrz,axfer,keyreg,pay)void"
	txna ApplicationArgs 0
	match *abi_route_txnTypes

	// this contract does not implement the given ABI method for call NoOp
	err