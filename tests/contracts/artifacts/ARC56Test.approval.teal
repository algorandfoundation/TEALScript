#pragma version 10
intcblock 1 TMPL_someNumber 8
bytecblock 0x151f7c75 0x626f784b6579

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *call_OptIn *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// customStructMethod((uint64))(uint64)
*abi_route_customStructMethod:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// input: (uint64)
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 8
	==

	// argument 0 (input) for customStructMethod must be a (uint64)
	assert

	// execute customStructMethod((uint64))(uint64)
	callsub customStructMethod
	concat
	log
	intc 0 // 1
	return

// customStructMethod(input: AnotherCustomStruct): AnotherCustomStruct
customStructMethod:
	proto 1 1

	// tests/contracts/inheritance-external.algo.ts:21
	// return input;
	frame_dig -1 // input: AnotherCustomStruct
	retsub

// foo(((uint64,uint64),(uint64,uint64)))(uint64,uint64)
*abi_route_foo:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// inputs: ((uint64,uint64),(uint64,uint64))
	txna ApplicationArgs 1
	dup
	len
	pushint 32
	==

	// argument 0 (inputs) for foo must be a ((uint64,uint64),(uint64,uint64))
	assert

	// execute foo(((uint64,uint64),(uint64,uint64)))(uint64,uint64)
	callsub foo
	concat
	log
	intc 0 // 1
	return

// foo(inputs: Inputs): Outputs
foo:
	proto 1 1

	// *if0_condition
	// tests/contracts/arc56.algo.ts:25
	// inputs.subtract.a < inputs.subtract.b
	frame_dig -1 // inputs: Inputs
	extract 16 8
	btoi
	frame_dig -1 // inputs: Inputs
	extract 24 8
	btoi
	<
	bz *if0_end

	// *if0_consequent
	// subtract.a must be greater than subtract.b
	err

*if0_end:
	// tests/contracts/arc56.algo.ts:27
	// this.globalKey.value = this.someNumber
	pushbytes 0x676c6f62616c4b6579 // "globalKey"
	intc 1 // TMPL_someNumber
	app_global_put

	// tests/contracts/arc56.algo.ts:28
	// this.globalMap('foo').value = { foo: 13, bar: 37 }
	pushbytes 0x700003666f6f
	pushbytes 0x000d0025
	app_global_put

	// tests/contracts/arc56.algo.ts:30
	// return {
	//       sum: inputs.add.a + inputs.add.b,
	//       difference: inputs.subtract.a - inputs.subtract.b,
	//     };
	frame_dig -1 // inputs: Inputs
	extract 0 8
	btoi
	frame_dig -1 // inputs: Inputs
	extract 8 8
	btoi
	+
	itob
	frame_dig -1 // inputs: Inputs
	extract 16 8
	btoi
	frame_dig -1 // inputs: Inputs
	extract 24 8
	btoi
	-
	itob
	concat
	retsub

// optInToApplication()void
*abi_route_optInToApplication:
	// execute optInToApplication()void
	callsub optInToApplication
	intc 0 // 1
	return

// optInToApplication(): void
optInToApplication:
	proto 0 0

	// tests/contracts/arc56.algo.ts:37
	// this.localKey(this.txn.sender).value = this.someNumber
	txn Sender
	pushbytes 0x6c6f63616c4b6579 // "localKey"
	intc 1 // TMPL_someNumber
	app_local_put

	// tests/contracts/arc56.algo.ts:38
	// this.localMap(this.txn.sender, 'foo').value = 'bar'
	txn Sender
	pushbytes 0x70666f6f
	pushbytes 0x0003626172
	app_local_put

	// tests/contracts/arc56.algo.ts:39
	// this.boxKey.value = 'baz'
	bytec 1 //  "boxKey"
	dup
	box_del
	pop
	pushbytes 0x000362617a
	box_put

	// tests/contracts/arc56.algo.ts:40
	// this.boxMap({ add: { a: 1, b: 2 }, subtract: { a: 4, b: 3 } }).value = { sum: 3, difference: 1 }
	pushbytes 0x700000000000000001000000000000000200000000000000040000000000000003
	pushbytes 0x00000000000000030000000000000001
	box_put
	retsub

// customType((uint64))(uint64)
*abi_route_customType:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// input: (uint64)
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 8
	==

	// argument 0 (input) for customType must be a (uint64)
	assert

	// execute customType((uint64))(uint64)
	callsub customType
	concat
	log
	intc 0 // 1
	return

// customType(input: CustomStructAsName): CustomStructAsName
customType:
	proto 1 1

	// tests/contracts/arc56.algo.ts:44
	// return input;
	frame_dig -1 // input: CustomStructAsName
	retsub

*abi_route_createApplication:
	intc 0 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x8d22739a // method "customStructMethod((uint64))(uint64)"
	pushbytes 0x396d550e // method "foo(((uint64,uint64),(uint64,uint64)))(uint64,uint64)"
	pushbytes 0x0dbf02c7 // method "customType((uint64))(uint64)"
	txna ApplicationArgs 0
	match *abi_route_customStructMethod *abi_route_foo *abi_route_customType

	// this contract does not implement the given ABI method for call NoOp
	err

*call_OptIn:
	pushbytes 0x01a3a3ff // method "optInToApplication()void"
	txna ApplicationArgs 0
	match *abi_route_optInToApplication

	// this contract does not implement the given ABI method for call OptIn
	err