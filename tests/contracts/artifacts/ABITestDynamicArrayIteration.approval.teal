#pragma version 10
intcblock 1 2 0
bytecblock 0x

// This TEAL was generated by TEALScript v0.106.3
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// dynamicArrayIteration()string
*abi_route_dynamicArrayIteration:
	// The ABI return prefix
	pushbytes 0x151f7c75

	// execute dynamicArrayIteration()string
	callsub dynamicArrayIteration
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// dynamicArrayIteration(): string
dynamicArrayIteration:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// tests/contracts/abi.algo.ts:1600
	// a: string[] = ['Hello ', 'World', '!']
	bytec 0 //  initial head
	bytec 0 //  initial tail
	pushbytes 0x0006 // initial head offset
	pushbytes 0x000648656c6c6f20
	callsub *process_dynamic_tuple_element
	pushbytes 0x0005576f726c64
	callsub *process_dynamic_tuple_element
	pushbytes 0x000121
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	pushbytes 0x0003
	swap
	concat
	frame_bury 0 // a: string[]

	// tests/contracts/abi.algo.ts:1601
	// message = ''
	bytec 0 //  ""
	frame_bury 1 // message: byte[]

	// tests/contracts/abi.algo.ts:1603
	// for (let i = 0; i < a.length; i += 1)
	intc 2 // 0
	frame_bury 2 // i: uint64

*for_0:
	// tests/contracts/abi.algo.ts:1603
	// i < a.length
	frame_dig 2 // i: uint64
	frame_dig 0 // a: string[]
	intc 2 // 0
	extract_uint16
	<
	bz *for_0_end

	// tests/contracts/abi.algo.ts:1604
	// message += a[i]
	frame_dig 1 // message: byte[]
	frame_dig 0 // a: string[]
	store 255 // full array
	intc 2 //  initial offset
	frame_dig 2 // i: uint64
	intc 1 // 2
	* // acc * 2
	+
	intc 1 // 2
	+ // add two for length
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	intc 1 // 2
	+ // add two for length
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 0 //  get type length
	* // multiply by type length
	intc 1 // 2
	+ // add two for length
	extract3
	extract 2 0
	concat
	frame_bury 1 // message: byte[]

*for_0_continue:
	// tests/contracts/abi.algo.ts:1603
	// i += 1
	frame_dig 2 // i: uint64
	intc 0 // 1
	+
	frame_bury 2 // i: uint64
	b *for_0

*for_0_end:
	// tests/contracts/abi.algo.ts:1607
	// return message;
	frame_dig 1 // message: byte[]

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

*abi_route_createApplication:
	intc 0 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xa957c5ed // method "dynamicArrayIteration()string"
	txna ApplicationArgs 0
	match *abi_route_dynamicArrayIteration

	// this contract does not implement the given ABI method for call NoOp
	err

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub