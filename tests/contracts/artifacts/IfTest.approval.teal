#pragma version 10
intcblock 1 0 2 32
bytecblock 0x151f7c75 0x6966 0x656c7365 0x656e64 0x666f6f 0x 0x656c73652069662031 0x656c73652069662032 0x656c7365206966

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// singleIf(bool)string
*abi_route_singleIf:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// arg0: bool
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 1
	==

	// argument 0 (arg0) for singleIf must be a bool
	assert
	intc 1 // 0
	getbit

	// execute singleIf(bool)string
	callsub singleIf
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// singleIf(arg0: boolean): string
singleIf:
	proto 1 1

	// *if0_condition
	// tests/contracts/if.algo.ts:7
	// arg0
	frame_dig -1 // arg0: boolean
	bz *if0_end

	// *if0_consequent
	// tests/contracts/if.algo.ts:8
	// return 'if';
	bytec 1 //  "if"
	retsub

*if0_end:
	// tests/contracts/if.algo.ts:11
	// return 'end';
	bytec 3 //  "end"
	retsub

// ifElse(bool)string
*abi_route_ifElse:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// arg0: bool
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 1
	==

	// argument 0 (arg0) for ifElse must be a bool
	assert
	intc 1 // 0
	getbit

	// execute ifElse(bool)string
	callsub ifElse
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// ifElse(arg0: boolean): string
ifElse:
	proto 1 1

	// *if1_condition
	// tests/contracts/if.algo.ts:15
	// arg0
	frame_dig -1 // arg0: boolean
	bz *if1_else

	// *if1_consequent
	// tests/contracts/if.algo.ts:16
	// return 'if';
	bytec 1 //  "if"
	retsub
	b *if1_end

*if1_else:
	// tests/contracts/if.algo.ts:18
	// return 'else';
	bytec 2 //  "else"
	retsub

*if1_end:
	retsub

// ifElseIf(bool,bool)string
*abi_route_ifElseIf:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// arg1: bool
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 1
	==

	// argument 0 (arg1) for ifElseIf must be a bool
	assert
	intc 1 // 0
	getbit

	// arg0: bool
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 1
	==

	// argument 1 (arg0) for ifElseIf must be a bool
	assert
	intc 1 // 0
	getbit

	// execute ifElseIf(bool,bool)string
	callsub ifElseIf
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// ifElseIf(arg0: boolean, arg1: boolean): string
ifElseIf:
	proto 2 1

	// *if2_condition
	// tests/contracts/if.algo.ts:23
	// arg0
	frame_dig -1 // arg0: boolean
	bz *if2_elseif1_condition

	// *if2_consequent
	// tests/contracts/if.algo.ts:24
	// return 'if';
	bytec 1 //  "if"
	retsub
	b *if2_end

*if2_elseif1_condition:
	// tests/contracts/if.algo.ts:25
	// arg1
	frame_dig -2 // arg1: boolean
	bz *if2_end

	// *if2_elseif1_consequent
	// tests/contracts/if.algo.ts:26
	// return 'else if';
	bytec 8 //  "else if"
	retsub

*if2_end:
	// tests/contracts/if.algo.ts:29
	// return 'end';
	bytec 3 //  "end"
	retsub

// ifElseIfElse(bool,bool)string
*abi_route_ifElseIfElse:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// arg1: bool
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 1
	==

	// argument 0 (arg1) for ifElseIfElse must be a bool
	assert
	intc 1 // 0
	getbit

	// arg0: bool
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 1
	==

	// argument 1 (arg0) for ifElseIfElse must be a bool
	assert
	intc 1 // 0
	getbit

	// execute ifElseIfElse(bool,bool)string
	callsub ifElseIfElse
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// ifElseIfElse(arg0: boolean, arg1: boolean): string
ifElseIfElse:
	proto 2 1

	// *if3_condition
	// tests/contracts/if.algo.ts:33
	// arg0
	frame_dig -1 // arg0: boolean
	bz *if3_elseif1_condition

	// *if3_consequent
	// tests/contracts/if.algo.ts:34
	// return 'if';
	bytec 1 //  "if"
	retsub
	b *if3_end

*if3_elseif1_condition:
	// tests/contracts/if.algo.ts:35
	// arg1
	frame_dig -2 // arg1: boolean
	bz *if3_else

	// *if3_elseif1_consequent
	// tests/contracts/if.algo.ts:36
	// return 'else if';
	bytec 8 //  "else if"
	retsub
	b *if3_end

*if3_else:
	// tests/contracts/if.algo.ts:38
	// return 'else';
	bytec 2 //  "else"
	retsub

*if3_end:
	retsub

// ifElseIfElseIf(bool,bool,bool)string
*abi_route_ifElseIfElseIf:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// arg2: bool
	txna ApplicationArgs 3
	dup
	len
	intc 0 // 1
	==

	// argument 0 (arg2) for ifElseIfElseIf must be a bool
	assert
	intc 1 // 0
	getbit

	// arg1: bool
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 1
	==

	// argument 1 (arg1) for ifElseIfElseIf must be a bool
	assert
	intc 1 // 0
	getbit

	// arg0: bool
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 1
	==

	// argument 2 (arg0) for ifElseIfElseIf must be a bool
	assert
	intc 1 // 0
	getbit

	// execute ifElseIfElseIf(bool,bool,bool)string
	callsub ifElseIfElseIf
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// ifElseIfElseIf(arg0: boolean, arg1: boolean, arg2: boolean): string
ifElseIfElseIf:
	proto 3 1

	// *if4_condition
	// tests/contracts/if.algo.ts:43
	// arg0
	frame_dig -1 // arg0: boolean
	bz *if4_elseif1_condition

	// *if4_consequent
	// tests/contracts/if.algo.ts:44
	// return 'if';
	bytec 1 //  "if"
	retsub
	b *if4_end

*if4_elseif1_condition:
	// tests/contracts/if.algo.ts:45
	// arg1
	frame_dig -2 // arg1: boolean
	bz *if4_elseif2_condition

	// *if4_elseif1_consequent
	// tests/contracts/if.algo.ts:46
	// return 'else if 1';
	bytec 6 //  "else if 1"
	retsub
	b *if4_end

*if4_elseif2_condition:
	// tests/contracts/if.algo.ts:47
	// arg2
	frame_dig -3 // arg2: boolean
	bz *if4_end

	// *if4_elseif2_consequent
	// tests/contracts/if.algo.ts:48
	// return 'else if 2';
	bytec 7 //  "else if 2"
	retsub

*if4_end:
	// tests/contracts/if.algo.ts:51
	// return 'end';
	bytec 3 //  "end"
	retsub

// ifElseIfElseIfElse(bool,bool,bool)string
*abi_route_ifElseIfElseIfElse:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// arg2: bool
	txna ApplicationArgs 3
	dup
	len
	intc 0 // 1
	==

	// argument 0 (arg2) for ifElseIfElseIfElse must be a bool
	assert
	intc 1 // 0
	getbit

	// arg1: bool
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 1
	==

	// argument 1 (arg1) for ifElseIfElseIfElse must be a bool
	assert
	intc 1 // 0
	getbit

	// arg0: bool
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 1
	==

	// argument 2 (arg0) for ifElseIfElseIfElse must be a bool
	assert
	intc 1 // 0
	getbit

	// execute ifElseIfElseIfElse(bool,bool,bool)string
	callsub ifElseIfElseIfElse
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// ifElseIfElseIfElse(arg0: boolean, arg1: boolean, arg2: boolean): string
ifElseIfElseIfElse:
	proto 3 1

	// *if5_condition
	// tests/contracts/if.algo.ts:55
	// arg0
	frame_dig -1 // arg0: boolean
	bz *if5_elseif1_condition

	// *if5_consequent
	// tests/contracts/if.algo.ts:56
	// return 'if';
	bytec 1 //  "if"
	retsub
	b *if5_end

*if5_elseif1_condition:
	// tests/contracts/if.algo.ts:57
	// arg1
	frame_dig -2 // arg1: boolean
	bz *if5_elseif2_condition

	// *if5_elseif1_consequent
	// tests/contracts/if.algo.ts:58
	// return 'else if 1';
	bytec 6 //  "else if 1"
	retsub
	b *if5_end

*if5_elseif2_condition:
	// tests/contracts/if.algo.ts:59
	// arg2
	frame_dig -3 // arg2: boolean
	bz *if5_else

	// *if5_elseif2_consequent
	// tests/contracts/if.algo.ts:60
	// return 'else if 2';
	bytec 7 //  "else if 2"
	retsub
	b *if5_end

*if5_else:
	// tests/contracts/if.algo.ts:62
	// return 'else';
	bytec 2 //  "else"
	retsub

*if5_end:
	retsub

// nestedIf(bool,bool)string
*abi_route_nestedIf:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// arg1: bool
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 1
	==

	// argument 0 (arg1) for nestedIf must be a bool
	assert
	intc 1 // 0
	getbit

	// arg0: bool
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 1
	==

	// argument 1 (arg0) for nestedIf must be a bool
	assert
	intc 1 // 0
	getbit

	// execute nestedIf(bool,bool)string
	callsub nestedIf
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// nestedIf(arg0: boolean, arg1: boolean): string
nestedIf:
	proto 2 1

	// *if6_condition
	// tests/contracts/if.algo.ts:67
	// arg0
	frame_dig -1 // arg0: boolean
	bz *if6_else

	// *if6_consequent
	// *if7_condition
	// tests/contracts/if.algo.ts:68
	// arg1
	frame_dig -2 // arg1: boolean
	bz *if7_end

	// *if7_consequent
	// tests/contracts/if.algo.ts:69
	// return 'nested if';
	pushbytes 0x6e6573746564206966 // "nested if"
	retsub

*if7_end:
	// tests/contracts/if.algo.ts:71
	// return 'if';
	bytec 1 //  "if"
	retsub
	b *if6_end

*if6_else:
	// tests/contracts/if.algo.ts:73
	// return 'else';
	bytec 2 //  "else"
	retsub

*if6_end:
	retsub

// bracketlessIfElse(bool)string
*abi_route_bracketlessIfElse:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// arg0: bool
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 1
	==

	// argument 0 (arg0) for bracketlessIfElse must be a bool
	assert
	intc 1 // 0
	getbit

	// execute bracketlessIfElse(bool)string
	callsub bracketlessIfElse
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// bracketlessIfElse(arg0: boolean): string
bracketlessIfElse:
	proto 1 1

	// *if8_condition
	// tests/contracts/if.algo.ts:78
	// arg0
	frame_dig -1 // arg0: boolean
	bz *if8_else

	// *if8_consequent
	// tests/contracts/if.algo.ts:78
	// return 'if';
	bytec 1 //  "if"
	retsub
	b *if8_end

*if8_else:
	// tests/contracts/if.algo.ts:79
	// return 'else';
	bytec 2 //  "else"
	retsub

*if8_end:
	retsub

// nestedTernary(bool,bool)uint64
*abi_route_nestedTernary:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// arg1: bool
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 1
	==

	// argument 0 (arg1) for nestedTernary must be a bool
	assert
	intc 1 // 0
	getbit

	// arg0: bool
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 1
	==

	// argument 1 (arg0) for nestedTernary must be a bool
	assert
	intc 1 // 0
	getbit

	// execute nestedTernary(bool,bool)uint64
	callsub nestedTernary
	itob
	concat
	log
	intc 0 // 1
	return

// nestedTernary(arg0: boolean, arg1: boolean): uint64
nestedTernary:
	proto 2 1

	// tests/contracts/if.algo.ts:84
	// return arg0 ? 1 : arg1 ? 2 : 3;
	frame_dig -1 // arg0: boolean
	bz *ternary0_false
	intc 0 // 1
	b *ternary0_end

*ternary0_false:
	frame_dig -2 // arg1: boolean
	bz *ternary1_false
	intc 2 // 2
	b *ternary1_end

*ternary1_false:
	pushint 3

*ternary1_end:

*ternary0_end:
	retsub

// stringIf(string)uint64
*abi_route_stringIf:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// arg0: string
	txna ApplicationArgs 1
	extract 2 0

	// execute stringIf(string)uint64
	callsub stringIf
	itob
	concat
	log
	intc 0 // 1
	return

// stringIf(arg0: string): uint64
stringIf:
	proto 1 1

	// *if9_condition
	// tests/contracts/if.algo.ts:88
	// arg0
	frame_dig -1 // arg0: string
	bytec 5 // 0x
	b!=
	bz *if9_end

	// *if9_consequent
	// tests/contracts/if.algo.ts:89
	// return 1;
	intc 0 // 1
	retsub

*if9_end:
	// tests/contracts/if.algo.ts:92
	// return 2;
	intc 2 // 2
	retsub

// stringTernary(string)uint64
*abi_route_stringTernary:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// arg0: string
	txna ApplicationArgs 1
	extract 2 0

	// execute stringTernary(string)uint64
	callsub stringTernary
	itob
	concat
	log
	intc 0 // 1
	return

// stringTernary(arg0: string): uint64
stringTernary:
	proto 1 1

	// tests/contracts/if.algo.ts:96
	// return arg0 ? 1 : 2;
	frame_dig -1 // arg0: string
	bytec 5 // 0x
	b!=
	bz *ternary2_false
	intc 0 // 1
	b *ternary2_end

*ternary2_false:
	intc 2 // 2

*ternary2_end:
	retsub

// smallUintConditional(uint16)void
*abi_route_smallUintConditional:
	// a: uint16
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 2
	==

	// argument 0 (a) for smallUintConditional must be a uint16
	assert
	btoi

	// execute smallUintConditional(uint16)void
	callsub smallUintConditional
	intc 0 // 1
	return

// smallUintConditional(a: uint16): void
smallUintConditional:
	proto 1 0

	// *if10_condition
	// tests/contracts/if.algo.ts:100
	// a
	frame_dig -1 // a: uint16
	bytec 5 // 0x
	b!=
	bz *if10_end

	// *if10_consequent
	// tests/contracts/if.algo.ts:101
	// log('foo')
	bytec 4 //  "foo"
	log

*if10_end:
	retsub

// smallUintComparisonConditional(uint16,uint16)void
*abi_route_smallUintComparisonConditional:
	// b: uint16
	txna ApplicationArgs 2
	dup
	len
	intc 2 // 2
	==

	// argument 0 (b) for smallUintComparisonConditional must be a uint16
	assert
	btoi

	// a: uint16
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 2
	==

	// argument 1 (a) for smallUintComparisonConditional must be a uint16
	assert
	btoi

	// execute smallUintComparisonConditional(uint16,uint16)void
	callsub smallUintComparisonConditional
	intc 0 // 1
	return

// smallUintComparisonConditional(a: uint16, b: uint16): void
smallUintComparisonConditional:
	proto 2 0

	// *if11_condition
	// tests/contracts/if.algo.ts:106
	// a <= b
	frame_dig -1 // a: uint16
	frame_dig -2 // b: uint16
	<=
	bz *if11_end

	// *if11_consequent
	// tests/contracts/if.algo.ts:107
	// log('foo')
	bytec 4 //  "foo"
	log

*if11_end:
	retsub

// uint256ComparsionConditional(uint256,uint256)void
*abi_route_uint256ComparsionConditional:
	// b: uint256
	txna ApplicationArgs 2
	dup
	len
	intc 3 // 32
	==

	// argument 0 (b) for uint256ComparsionConditional must be a uint256
	assert

	// a: uint256
	txna ApplicationArgs 1
	dup
	len
	intc 3 // 32
	==

	// argument 1 (a) for uint256ComparsionConditional must be a uint256
	assert

	// execute uint256ComparsionConditional(uint256,uint256)void
	callsub uint256ComparsionConditional
	intc 0 // 1
	return

// uint256ComparsionConditional(a: uint256, b: uint256): void
uint256ComparsionConditional:
	proto 2 0

	// *if12_condition
	// tests/contracts/if.algo.ts:112
	// a <= b
	frame_dig -1 // a: uint256
	frame_dig -2 // b: uint256
	b<=
	bz *if12_end

	// *if12_consequent
	// tests/contracts/if.algo.ts:113
	// log('foo')
	bytec 4 //  "foo"
	log

*if12_end:
	retsub

// nestedIfInElseIf(bool,bool)string
*abi_route_nestedIfInElseIf:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// b: bool
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 1
	==

	// argument 0 (b) for nestedIfInElseIf must be a bool
	assert
	intc 1 // 0
	getbit

	// a: bool
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 1
	==

	// argument 1 (a) for nestedIfInElseIf must be a bool
	assert
	intc 1 // 0
	getbit

	// execute nestedIfInElseIf(bool,bool)string
	callsub nestedIfInElseIf
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// nestedIfInElseIf(a: boolean, b: boolean): string
nestedIfInElseIf:
	proto 2 1

	// *if13_condition
	// tests/contracts/if.algo.ts:118
	// a
	frame_dig -1 // a: boolean
	bz *if13_elseif1_condition

	// *if13_consequent
	// *if14_condition
	// tests/contracts/if.algo.ts:119
	// b
	frame_dig -2 // b: boolean
	bz *if14_else

	// *if14_consequent
	// tests/contracts/if.algo.ts:120
	// return 'a and b';
	pushbytes 0x6120616e642062 // "a and b"
	retsub
	b *if14_end

*if14_else:
	// tests/contracts/if.algo.ts:122
	// return 'a';
	pushbytes 0x61 // "a"
	retsub

*if14_end:
	b *if13_end

*if13_elseif1_condition:
	// tests/contracts/if.algo.ts:124
	// b
	frame_dig -2 // b: boolean
	bz *if13_else

	// *if13_elseif1_consequent
	// tests/contracts/if.algo.ts:125
	// return 'b';
	pushbytes 0x62 // "b"
	retsub
	b *if13_end

*if13_else:
	// tests/contracts/if.algo.ts:127
	// return 'neither';
	pushbytes 0x6e656974686572 // "neither"
	retsub

*if13_end:
	retsub

*abi_route_createApplication:
	intc 0 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x436ec1c2 // method "singleIf(bool)string"
	pushbytes 0x1c7a0d5e // method "ifElse(bool)string"
	pushbytes 0x5e0fb6cf // method "ifElseIf(bool,bool)string"
	pushbytes 0x5e1c6c50 // method "ifElseIfElse(bool,bool)string"
	pushbytes 0x58d0ba92 // method "ifElseIfElseIf(bool,bool,bool)string"
	pushbytes 0x5d2f4f02 // method "ifElseIfElseIfElse(bool,bool,bool)string"
	pushbytes 0x845729d9 // method "nestedIf(bool,bool)string"
	pushbytes 0x8fe76ca8 // method "bracketlessIfElse(bool)string"
	pushbytes 0x1a3c7878 // method "nestedTernary(bool,bool)uint64"
	pushbytes 0x74bcc868 // method "stringIf(string)uint64"
	pushbytes 0x4212f905 // method "stringTernary(string)uint64"
	pushbytes 0x95ddaebf // method "smallUintConditional(uint16)void"
	pushbytes 0x3147b866 // method "smallUintComparisonConditional(uint16,uint16)void"
	pushbytes 0x42897f61 // method "uint256ComparsionConditional(uint256,uint256)void"
	pushbytes 0x534be2b7 // method "nestedIfInElseIf(bool,bool)string"
	txna ApplicationArgs 0
	match *abi_route_singleIf *abi_route_ifElse *abi_route_ifElseIf *abi_route_ifElseIfElse *abi_route_ifElseIfElseIf *abi_route_ifElseIfElseIfElse *abi_route_nestedIf *abi_route_bracketlessIfElse *abi_route_nestedTernary *abi_route_stringIf *abi_route_stringTernary *abi_route_smallUintConditional *abi_route_smallUintComparisonConditional *abi_route_uint256ComparsionConditional *abi_route_nestedIfInElseIf

	// this contract does not implement the given ABI method for call NoOp
	err